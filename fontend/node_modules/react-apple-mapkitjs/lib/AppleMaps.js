"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AppleMaps =
/*#__PURE__*/
function (_Component) {
  _inherits(AppleMaps, _Component);

  function AppleMaps() {
    _classCallCheck(this, AppleMaps);

    return _possibleConstructorReturn(this, _getPrototypeOf(AppleMaps).apply(this, arguments));
  }

  _createClass(AppleMaps, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;

      var _this$props = this.props,
          token = _this$props.token,
          children = _this$props.children;
      this.canvas = document.createElement('canvas');
      this.canvas.id = 'currentLocationOverride';
      mapkit.init({
        authorizationCallback: function authorizationCallback(done) {
          done(token);
        }
      });
      this.map = new mapkit.Map('map'); //	Annotations

      if (children !== undefined && children.length) {
        children.forEach(function (child) {
          if (child.type.name === 'Annotation') {
            _this.createAnnotation(child.props);
          }
        });
      } else if (children !== undefined && children.props) {
        if (children.type.name === 'Annotation') {
          this.createAnnotation(children.props);
        }
      } //	Image Annotations


      if (children !== undefined && children.length) {
        children.forEach(function (child) {
          if (child.type.name === 'ImageAnnotation') {
            _this.createImageAnnotation(child.props);
          }
        });
      } else if (children !== undefined && children.props) {
        if (children.type.name === 'ImageAnnotation') {
          this.createImageAnnotation(children.props);
        }
      } // Current Location Override


      if (children !== undefined && children.length) {
        children.forEach(function (child) {
          if (child.type.name === 'CurrentLocationOverride') {
            _this.createCurrentLocationOverride(child.props);
          }
        });
      } else if (children !== undefined && children.props) {
        if (children.type.name === 'CurrentLocationOverride') {
          this.createCurrentLocationOverride(children.props);
        }
      } //	Set main coords


      this.setMainCoords();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var children = this.props.children;
      var checkLongitudeChange, checkLatitudeChange, checkDirectionChange;

      if (typeof children !== 'undefined') {
        var firstChild = children[0] ? children[0] : children;
        var prevFirstChild = prevProps.children[0] ? prevProps.children[0] : prevProps.children;
        checkLongitudeChange = firstChild.props.longitude !== prevFirstChild.props.longitude;
        checkLatitudeChange = firstChild.props.latitude !== prevFirstChild.props.latitude;
        checkDirectionChange = firstChild.props.direction !== prevFirstChild.props.direction;
      }

      if (checkLongitudeChange || checkLatitudeChange || checkDirectionChange) {
        if (children !== undefined && children.length) {
          children.forEach(function (child) {
            if (child.type.name === 'CurrentLocationOverride') {
              _this2.updateCurrentLocationOverride(child.props);
            }
          });
        } else if (children !== undefined && children.props) {
          if (children.type.name === 'CurrentLocationOverride') {
            this.updateCurrentLocationOverride(children.props);
          }
        }
      }
    }
  }, {
    key: "createAnnotation",
    value: function createAnnotation(annotationOptions) {
      var longitude = annotationOptions.longitude,
          latitude = annotationOptions.latitude,
          color = annotationOptions.color,
          glyphText = annotationOptions.glyphText,
          glyphImage = annotationOptions.glyphImage,
          selected = annotationOptions.selected,
          title = annotationOptions.title,
          subtitle = annotationOptions.subtitle,
          visible = annotationOptions.visible;
      var MarkerAnnotation = mapkit.MarkerAnnotation;
      var coords = new mapkit.Coordinate(latitude, longitude);
      var newAnnotation = new MarkerAnnotation(coords, {
        color: color,
        title: title,
        subtitle: subtitle,
        selected: selected,
        visible: visible
      });
      glyphText ? newAnnotation.glyphText = glyphText : '';
      glyphImage ? newAnnotation.glyphImage = {
        1: glyphImage
      } : '';
      this.map.showItems([newAnnotation]);
    }
  }, {
    key: "createImageAnnotation",
    value: function createImageAnnotation(annotationOptions) {
      var longitude = annotationOptions.longitude,
          latitude = annotationOptions.latitude,
          url = annotationOptions.url,
          selected = annotationOptions.selected,
          title = annotationOptions.title,
          subtitle = annotationOptions.subtitle,
          visible = annotationOptions.visible;
      var ImageAnnotation = mapkit.ImageAnnotation;
      var coords = new mapkit.Coordinate(latitude, longitude);
      var newAnnotation = new ImageAnnotation(coords, {
        title: title,
        subtitle: subtitle,
        selected: selected,
        visible: visible,
        url: {
          1: url
        }
      });
      this.map.showItems([newAnnotation]);
    }
  }, {
    key: "createCurrentLocationOverride",
    value: function createCurrentLocationOverride(locationOptions) {
      var _this3 = this;

      var longitude = locationOptions.longitude,
          latitude = locationOptions.latitude,
          direction = locationOptions.direction; // AppleMaps needs options structured this way

      var options = {
        data: {
          direction: direction
        }
      };
      var coordinate = new mapkit.Coordinate(latitude, longitude);
      this.currentLocation = new mapkit.Annotation(coordinate, function () {
        var ctx = _this3.canvas.getContext('2d');

        ctx.beginPath();
        ctx.translate(150, 135);
        ctx.rotate(options.data.direction * Math.PI / 180);
        ctx.lineCap = 'round';
        ctx.moveTo(0, 7);
        ctx.lineTo(10, 12);
        ctx.lineTo(0, -13);
        ctx.lineTo(-10, 12);
        ctx.lineTo(0, 7);
        ctx.fillStyle = '#08F';
        ctx.strokeStyle = '#08F';
        ctx.stroke();
        ctx.fill();
        return _this3.canvas;
      }, options);
      this.map.showItems([this.currentLocation]);
    }
  }, {
    key: "updateCurrentLocationOverride",
    value: function updateCurrentLocationOverride(locationOptions) {
      var longitude = locationOptions.longitude,
          latitude = locationOptions.latitude;
      var coordinate = new mapkit.Coordinate(latitude, longitude);
      this.currentLocation.coordinate = coordinate;
    }
  }, {
    key: "setMainCoords",
    value: function setMainCoords() {
      var _this$props2 = this.props,
          longitude = _this$props2.longitude,
          latitude = _this$props2.latitude;
      var mainCoords = new mapkit.CoordinateRegion(new mapkit.Coordinate(latitude, longitude), new mapkit.CoordinateSpan(this.zoomLevel(), this.zoomLevel()));
      this.map.region = mainCoords;
    }
  }, {
    key: "zoomLevel",
    value: function zoomLevel() {
      var zoomLevel = this.props.zoomLevel;

      switch (zoomLevel) {
        case 0:
          return 300;

        case 1:
          return 75;

        case 2:
          return 18.75;

        case 3:
          return 4.68;

        case 4:
          return 1.17;

        case 5:
          return 0.39;

        case 6:
          return 0.073;

        case 7:
          return 0.018;

        case 8:
          return 0.0045;

        default:
          return 0.35;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          width = _this$props3.width,
          height = _this$props3.height;
      return _react["default"].createElement("div", {
        id: "map",
        style: {
          width: width,
          height: height
        }
      });
    }
  }]);

  return AppleMaps;
}(_react.Component);

AppleMaps.defaultProps = {
  width: '100wh',
  height: '100vh',
  zoomLevel: 6,
  longitude: 53.8008,
  latitude: -1.5491
};
var _default = AppleMaps;
exports["default"] = _default;