{"ast":null,"code":"import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\nvar createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    fetcher = linkOptions.fetch,\n    includeExtensions = linkOptions.includeExtensions,\n    useGETForQueries = linkOptions.useGETForQueries,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n  checkFetcher(fetcher);\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n  var addQueryParam = function (key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    var serializedVariables = void 0;\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n  var fragment = '',\n    preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\nvar HttpLink = function (_super) {\n  __extends(HttpLink, _super);\n  function HttpLink(opts) {\n    return _super.call(this, createHttpLink(opts).request) || this;\n  }\n  return HttpLink;\n}(ApolloLink);\nexport { HttpLink, createHttpLink };","map":{"version":3,"sources":["../src/httpLink.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n\nimport { ApolloLink, Observable, RequestHandler, fromError } from 'apollo-link';\nimport {\n  serializeFetchParameter,\n  selectURI,\n  parseAndCheckHttpResponse,\n  checkFetcher,\n  selectHttpOptionsAndBody,\n  createSignalIfSupported,\n  fallbackHttpConfig,\n  Body,\n  HttpOptions,\n  UriFunction as _UriFunction,\n} from 'apollo-link-http-common';\nimport { DefinitionNode } from 'graphql';\n\nexport namespace HttpLink {\n  //TODO Would much rather be able to export directly\n  export interface UriFunction extends _UriFunction {}\n  export interface Options extends HttpOptions {\n    /**\n     * If set to true, use the HTTP GET method for query operations. Mutations\n     * will still use the method specified in fetchOptions.method (which defaults\n     * to POST).\n     */\n    useGETForQueries?: boolean;\n  }\n}\n\n// For backwards compatibility.\nexport import FetchOptions = HttpLink.Options;\nexport import UriFunction = HttpLink.UriFunction;\n\nexport const createHttpLink = (linkOptions: HttpLink.Options = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: fetcher,\n    includeExtensions,\n    useGETForQueries,\n    ...requestOptions\n  } = linkOptions;\n\n  // dev warnings to ensure fetch is present\n  checkFetcher(fetcher);\n\n  //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    let controller;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      fetcher(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(opts?: HttpLink.Options) {\n    super(createHttpLink(opts).request);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}