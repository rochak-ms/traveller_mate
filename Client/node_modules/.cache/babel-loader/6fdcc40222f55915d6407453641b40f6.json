{"ast":null,"code":"import { getFragmentQueryDocument } from 'apollo-utilities';\nfunction queryFromPojo(obj) {\n  var op = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [op]\n  };\n  return out;\n}\nfunction fragmentFromPojo(obj, typename) {\n  var frag = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType'\n      }\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [frag]\n  };\n  return out;\n}\nfunction selectionSetFromObj(obj) {\n  if (typeof obj === 'number' || typeof obj === 'boolean' || typeof obj === 'string' || typeof obj === 'undefined' || obj === null) {\n    return null;\n  }\n  if (Array.isArray(obj)) {\n    return selectionSetFromObj(obj[0]);\n  }\n  var selections = [];\n  Object.keys(obj).forEach(function (key) {\n    var nestedSelSet = selectionSetFromObj(obj[key]);\n    var field = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key\n      },\n      selectionSet: nestedSelSet || undefined\n    };\n    selections.push(field);\n  });\n  var selectionSet = {\n    kind: 'SelectionSet',\n    selections: selections\n  };\n  return selectionSet;\n}\nvar justTypenameQuery = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: null,\n    variableDefinitions: null,\n    directives: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        alias: null,\n        name: {\n          kind: 'Name',\n          value: '__typename'\n        },\n        arguments: [],\n        directives: [],\n        selectionSet: null\n      }]\n    }\n  }]\n};\nvar ApolloCache = function () {\n  function ApolloCache() {}\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n  ApolloCache.prototype.writeQuery = function (options) {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables\n    });\n  };\n  ApolloCache.prototype.writeFragment = function (options) {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName)\n    });\n  };\n  ApolloCache.prototype.writeData = function (_a) {\n    var id = _a.id,\n      data = _a.data;\n    if (typeof id !== 'undefined') {\n      var typenameResult = null;\n      try {\n        typenameResult = this.read({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery\n        });\n      } catch (e) {}\n      var __typename = typenameResult && typenameResult.__typename || '__ClientData';\n      var dataToWrite = Object.assign({\n        __typename: __typename\n      }, data);\n      this.writeFragment({\n        id: id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite\n      });\n    } else {\n      this.writeQuery({\n        query: queryFromPojo(data),\n        data: data\n      });\n    }\n  };\n  return ApolloCache;\n}();\nvar Cache;\n(function (Cache) {})(Cache || (Cache = {}));\nexport { ApolloCache, Cache };","map":{"version":3,"sources":["../src/utils.ts","../src/cache.ts","../src/types/Cache.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from 'graphql';\n\nexport function queryFromPojo(obj: any): DocumentNode {\n  const op: OperationDefinitionNode = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery',\n    },\n    selectionSet: selectionSetFromObj(obj),\n  };\n\n  const out: DocumentNode = {\n    kind: 'Document',\n    definitions: [op],\n  };\n\n  return out;\n}\n\nexport function fragmentFromPojo(obj: any, typename?: string): DocumentNode {\n  const frag: FragmentDefinitionNode = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType',\n      },\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery',\n    },\n    selectionSet: selectionSetFromObj(obj),\n  };\n\n  const out: DocumentNode = {\n    kind: 'Document',\n    definitions: [frag],\n  };\n\n  return out;\n}\n\nfunction selectionSetFromObj(obj: any): SelectionSetNode {\n  if (\n    typeof obj === 'number' ||\n    typeof obj === 'boolean' ||\n    typeof obj === 'string' ||\n    typeof obj === 'undefined' ||\n    obj === null\n  ) {\n    // No selection set here\n    return null;\n  }\n\n  if (Array.isArray(obj)) {\n    // GraphQL queries don't include arrays\n    return selectionSetFromObj(obj[0]);\n  }\n\n  // Now we know it's an object\n  const selections: FieldNode[] = [];\n\n  Object.keys(obj).forEach(key => {\n    const nestedSelSet: SelectionSetNode = selectionSetFromObj(obj[key]);\n\n    const field: FieldNode = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key,\n      },\n      selectionSet: nestedSelSet || undefined,\n    };\n\n    selections.push(field);\n  });\n\n  const selectionSet: SelectionSetNode = {\n    kind: 'SelectionSet',\n    selections,\n  };\n\n  return selectionSet;\n}\n\nexport const justTypenameQuery: DocumentNode = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: null,\n      variableDefinitions: null,\n      directives: [],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: null,\n            name: {\n              kind: 'Name',\n              value: '__typename',\n            },\n            arguments: [],\n            directives: [],\n            selectionSet: null,\n          },\n        ],\n      },\n    },\n  ],\n};\n","import { DocumentNode } from 'graphql';\nimport { getFragmentQueryDocument } from 'apollo-utilities';\n\nimport { DataProxy, Cache } from './types';\nimport { justTypenameQuery, queryFromPojo, fragmentFromPojo } from './utils';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<T, TVariables = any>(\n    query: Cache.ReadOptions<TVariables>,\n  ): T | null;\n  public abstract write<TResult = any, TVariables = any>(\n    write: Cache.WriteOptions<TResult, TVariables>,\n  ): void;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch(watch: Cache.WatchOptions): () => void;\n  public abstract evict<TVariables = any>(\n    query: Cache.EvictOptions<TVariables>,\n  ): Cache.EvictionResult;\n  public abstract reset(): Promise<void>;\n\n  // intializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // optimistic API\n  public abstract removeOptimistic(id: string): void;\n\n  // transactional API\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n  ): void;\n  public abstract recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    id: string,\n  ): void;\n\n  // optional API\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n  // experimental\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: DataProxy.Query<TVariables>,\n    optimistic: boolean = false,\n  ): QueryType | null {\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic,\n    });\n  }\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: DataProxy.Fragment<TVariables>,\n    optimistic: boolean = false,\n  ): FragmentType | null {\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>(\n    options: Cache.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n    });\n  }\n\n  public writeFragment<TData = any, TVariables = any>(\n    options: Cache.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n    });\n  }\n\n  public writeData<TData = any>({\n    id,\n    data,\n  }: Cache.WriteDataOptions<TData>): void {\n    if (typeof id !== 'undefined') {\n      let typenameResult = null;\n      // Since we can't use fragments without having a typename in the store,\n      // we need to make sure we have one.\n      // To avoid overwriting an existing typename, we need to read it out first\n      // and generate a fake one if none exists.\n      try {\n        typenameResult = this.read<any>({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery,\n        });\n      } catch (e) {\n        // Do nothing, since an error just means no typename exists\n      }\n\n      // tslint:disable-next-line\n      const __typename =\n        (typenameResult && typenameResult.__typename) || '__ClientData';\n\n      // Add a type here to satisfy the inmemory cache\n      const dataToWrite = Object.assign({ __typename }, data);\n\n      this.writeFragment({\n        id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite,\n      });\n    } else {\n      this.writeQuery({ query: queryFromPojo(data), data });\n    }\n  }\n}\n","import { DataProxy } from './DataProxy';\n\nexport namespace Cache {\n  export type WatchCallback = (newData: any) => void;\n  export interface EvictionResult {\n    success: Boolean;\n  }\n\n  export interface ReadOptions<TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    rootId?: string;\n    previousResult?: any;\n    optimistic: boolean;\n  }\n\n  export interface WriteOptions<TResult = any, TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    dataId: string;\n    result: TResult;\n  }\n\n  export interface DiffOptions extends ReadOptions {\n    returnPartialData?: boolean;\n  }\n\n  export interface WatchOptions extends ReadOptions {\n    callback: WatchCallback;\n  }\n\n  export interface EvictOptions<TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    rootId?: string;\n  }\n\n  export import DiffResult = DataProxy.DiffResult;\n  export import WriteQueryOptions = DataProxy.WriteQueryOptions;\n  export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\n  export import WriteDataOptions = DataProxy.WriteDataOptions;\n  export import Fragment = DataProxy.Fragment;\n}\n"]},"metadata":{},"sourceType":"module"}