{"ast":null,"code":"import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  };\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n  return OperationData;\n}();\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n  function QueryData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      onNewData = _a.onNewData;\n    var _this = _super.call(this, options, context) || this;\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n      _this.onNewData();\n    };\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n      _this.startQuerySubscription();\n      return result;\n    };\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n    _this.onNewData = onNewData;\n    return _this;\n  }\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n    var _a = this.getOptions(),\n      skip = _a.skip,\n      query = _a.query;\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n      lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n    if (this.runLazy) {\n      delete options.skip;\n    }\n    return options;\n  };\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n    var result;\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n    return result;\n  };\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n  QueryData.prototype.initializeObservableQuery = function () {\n    var _a, _b;\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n      if (this.ssrInitiated()) {\n        (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.renderPromises) === null || _b === void 0 ? void 0 : _b.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n          networkStatus = _a.networkStatus,\n          data = _a.data;\n        var previousResult = _this.previousData.result;\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n        _this.onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previousData.result;\n        if (previousResult && previousResult.loading || !equal(error, _this.previousData.error)) {\n          _this.previousData.error = error;\n          _this.onNewData();\n        }\n      }\n    });\n  };\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n        partial = currentResult.partial,\n        networkStatus = currentResult.networkStatus,\n        errors = currentResult.errors;\n      var error = currentResult.error,\n        data = currentResult.data;\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n        result.data = data;\n      }\n    }\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    this.currentObservable.query && this.currentObservable.query.resetQueryStoreErrors();\n    return result;\n  };\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n    var _a = this.previousData.result,\n      data = _a.data,\n      loading = _a.loading,\n      error = _a.error;\n    if (!loading) {\n      var _b = this.getOptions(),\n        query = _b.query,\n        variables = _b.variables,\n        onCompleted = _b.onCompleted,\n        onError = _b.onError;\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n  return QueryData;\n}(OperationData);\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n  return ref.current.value;\n}\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n  var context = useContext(getApolloContext());\n  var _a = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    tick = _a[0],\n    forceUpdate = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function () {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n  function MutationData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      result = _a.result,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n      _this.onMutationStart();\n      var mutationId = _this.generateNewMutationId();\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n  MutationData.prototype.cleanup = function () {};\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n      mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      update = _a.update,\n      _b = _a.context,\n      mutationContext = _b === void 0 ? {} : _b,\n      _c = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _c === void 0 ? false : _c,\n      fetchPolicy = _a.fetchPolicy;\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n      onCompleted = _a.onCompleted,\n      ignoreResults = _a.ignoreResults;\n    var data = response.data,\n      errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n    var callOncomplete = function () {\n      return onCompleted ? onCompleted(data) : null;\n    };\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n    callOncomplete();\n  };\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n    if (onError) {\n      onError(error);\n    }\n  };\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n  return MutationData;\n}(OperationData);\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n  var _a = useState({\n      called: false,\n      loading: false\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n  function SubscriptionData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n    _this.initialize(options);\n    return _this;\n  }\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n    var currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  return SubscriptionData;\n}(OperationData);\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var _a = useState({\n      loading: !updatedOptions.skip,\n      error: undefined,\n      data: undefined\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var subscriptionDataRef = useRef();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n    return finish();\n  };\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n      variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n  return RenderPromises;\n}();\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };","map":{"version":3,"sources":["../src/data/OperationData.ts","../src/data/QueryData.ts","../src/utils/useDeepMemo.ts","../src/utils/useBaseQuery.ts","../src/useQuery.ts","../src/useLazyQuery.ts","../src/data/MutationData.ts","../src/useMutation.ts","../src/data/SubscriptionData.ts","../src/useSubscription.ts","../src/useApolloClient.ts","../src/ssr/RenderPromises.ts"],"names":["isEqual"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { LazyQueryHookOptions, QueryTuple } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\nimport ApolloClient from 'apollo-client';\n\nexport function useApolloClient(): ApolloClient<object> {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.'\n  );\n  return client!;\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}