{"ast":null,"code":"import { __extends } from 'tslib';\nimport { ApolloLink, Observable } from 'apollo-link';\nfunction onError(errorHandler) {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var sub;\n      var retriedSub;\n      var retriedResult;\n      try {\n        sub = forward(operation).subscribe({\n          next: function (result) {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: function (networkError) {\n            retriedResult = errorHandler({\n              operation: operation,\n              networkError: networkError,\n              graphQLErrors: networkError && networkError.result && networkError.result.errors,\n              forward: forward\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: function () {\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          }\n        });\n      } catch (e) {\n        errorHandler({\n          networkError: e,\n          operation: operation,\n          forward: forward\n        });\n        observer.error(e);\n      }\n      return function () {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\nvar ErrorLink = function (_super) {\n  __extends(ErrorLink, _super);\n  function ErrorLink(errorHandler) {\n    var _this = _super.call(this) || this;\n    _this.link = onError(errorHandler);\n    return _this;\n  }\n  ErrorLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n  return ErrorLink;\n}(ApolloLink);\nexport { ErrorLink, onError };","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;SAiCgB,OAAO,CAAC,YAA0B,EAAA;EAChD,OAAO,IAAI,UAAU,CAAC,UAAC,SAAS,EAAE,OAAO,EAAA;IACvC,OAAO,IAAI,UAAU,CAAC,UAAA,QAAQ,EAAA;MAC5B,IAAI,GAAG;MACP,IAAI,UAAU;MACd,IAAI,aAAa;MAEjB,IAAI;QACF,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;UACjC,IAAI,EAAE,UAAA,MAAM,EAAA;YACV,IAAI,MAAM,CAAC,MAAM,EAAE;cACjB,aAAa,GAAG,YAAY,CAAC;gBAC3B,aAAa,EAAE,MAAM,CAAC,MAAM;gBAC5B,QAAQ,EAAE,MAAM;gBAChB,SAAS,EAAA,SAAA;gBACT,OAAO,EAAA;eACR,CAAC;cAEF,IAAI,aAAa,EAAE;gBACjB,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC;kBACnC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;kBAClC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;kBACpC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ;iBAC1C,CAAC;gBACF;cACD;YACF;YACD,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;WACtB;UACD,KAAK,EAAE,UAAA,YAAY,EAAA;YACjB,aAAa,GAAG,YAAY,CAAC;cAC3B,SAAS,EAAA,SAAA;cACT,YAAY,EAAA,YAAA;cAEZ,aAAa,EACX,YAAY,IACZ,YAAY,CAAC,MAAM,IACnB,YAAY,CAAC,MAAM,CAAC,MAAM;cAC5B,OAAO,EAAA;aACR,CAAC;YACF,IAAI,aAAa,EAAE;cACjB,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC;gBACnC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAClC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACpC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ;eAC1C,CAAC;cACF;YACD;YACD,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC;WAC7B;UACD,QAAQ,EAAE,YAAA;YAGR,IAAI,CAAC,aAAa,EAAE;cAClB,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACnC;UACF;SACF,CAAC;OACH,CAAC,OAAO,CAAC,EAAE;QACV,YAAY,CAAC;UAAE,YAAY,EAAE,CAAC;UAAE,SAAS,EAAA,SAAA;UAAE,OAAO,EAAA;QAAA,CAAE,CAAC;QACrD,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;MAClB;MAED,OAAO,YAAA;QACL,IAAI,GAAG,EAAE,GAAG,CAAC,WAAW,EAAE;QAC1B,IAAI,UAAU,EAAE,GAAG,CAAC,WAAW,EAAE;OAClC;KACF,CAAC;GACH,CAAC;AACJ;;EAE+B,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;EAE7B,SAAA,SAAA,CAAY,YAAoC,EAAA;IAAhD,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IACP,KAAI,CAAC,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC;;EAClC;EAEM,SAAA,CAAA,SAAA,CAAA,OAAO,GAAd,UACE,SAAoB,EACpB,OAAiB,EAAA;IAEjB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC;GAC7C;EACH,OAAA,SAAC;AAAD,CAbA,CAA+B,UAAU,CAAA","sourcesContent":["/* tslint:disable */\n\nimport {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n  ExecutionResult,\n} from 'apollo-link';\nimport { GraphQLError } from 'graphql';\nimport { ServerError, ServerParseError } from 'apollo-link-http-common';\n\nexport interface ErrorResponse {\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  networkError?: Error | ServerError | ServerParseError;\n  response?: ExecutionResult;\n  operation: Operation;\n  forward: NextLink;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): Observable<FetchResult> | void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport function onError(errorHandler: ErrorHandler): ApolloLink {\n  return new ApolloLink((operation, forward) => {\n    return new Observable(observer => {\n      let sub;\n      let retriedSub;\n      let retriedResult;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: result => {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n                forward,\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer),\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: networkError => {\n            retriedResult = errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors:\n                networkError &&\n                networkError.result &&\n                networkError.result.errors,\n              forward,\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: () => {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          },\n        });\n      } catch (e) {\n        errorHandler({ networkError: e, operation, forward });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}