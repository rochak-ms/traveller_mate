{"ast":null,"code":"import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\nfunction validateOperation(operation) {\n  var OPERATION_FIELDS = ['query', 'operationName', 'variables', 'extensions', 'context'];\n  for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n    var key = _a[_i];\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n    }\n  }\n  return operation;\n}\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n    _this.link = link;\n    return _this;\n  }\n  return LinkError;\n}(Error);\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n  var completed = false;\n  return new Promise(function (resolve, reject) {\n    observable.subscribe({\n      next: function (data) {\n        if (completed) {\n          process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject\n    });\n  });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n  return new Observable(function (observer) {\n    promise.then(function (value) {\n      observer.next(value);\n      observer.complete();\n    }).catch(observer.error.bind(observer));\n  });\n}\nfunction fromError(errorValue) {\n  return new Observable(function (observer) {\n    observer.error(errorValue);\n  });\n}\nfunction transformOperation(operation) {\n  var transformedOperation = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query\n  };\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName = typeof transformedOperation.query !== 'string' ? getOperationName(transformedOperation.query) : '';\n  }\n  return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n  var context = __assign({}, starting);\n  var setContext = function (next) {\n    if (typeof next === 'function') {\n      context = __assign({}, context, next(context));\n    } else {\n      context = __assign({}, context, next);\n    }\n  };\n  var getContext = function () {\n    return __assign({}, context);\n  };\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext\n  });\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext\n  });\n  Object.defineProperty(operation, 'toKey', {\n    enumerable: false,\n    value: function () {\n      return getKey(operation);\n    }\n  });\n  return operation;\n}\nfunction getKey(operation) {\n  var query = operation.query,\n    variables = operation.variables,\n    operationName = operation.operationName;\n  return JSON.stringify([operationName, query, variables]);\n}\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n  return new ApolloLink(function () {\n    return Observable.of();\n  });\n}\nfunction from(links) {\n  if (links.length === 0) return empty();\n  return links.map(toLink).reduce(function (x, y) {\n    return x.concat(y);\n  });\n}\nfunction split(test, left, right) {\n  var leftLink = toLink(left);\n  var rightLink = toLink(right || new ApolloLink(passthrough));\n  if (isTerminating(leftLink) && isTerminating(rightLink)) {\n    return new ApolloLink(function (operation) {\n      return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n    });\n  }\n}\nvar concat = function (first, second) {\n  var firstLink = toLink(first);\n  if (isTerminating(firstLink)) {\n    process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n    return firstLink;\n  }\n  var nextLink = toLink(second);\n  if (isTerminating(nextLink)) {\n    return new ApolloLink(function (operation) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op) || Observable.of();\n      }) || Observable.of();\n    });\n  } else {\n    return new ApolloLink(function (operation, forward) {\n      return firstLink.request(operation, function (op) {\n        return nextLink.request(op, forward) || Observable.of();\n      }) || Observable.of();\n    });\n  }\n};\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n  };\n  ApolloLink.prototype.concat = function (next) {\n    return concat(this, next);\n  };\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n  };\n  ApolloLink.empty = empty;\n  ApolloLink.from = from;\n  ApolloLink.split = split;\n  ApolloLink.execute = execute;\n  return ApolloLink;\n}();\nfunction execute(link, operation) {\n  return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n}\nexport { ApolloLink, concat, createOperation, empty, execute, from, fromError, fromPromise, makePromise, split, toPromise };","map":{"version":3,"sources":["../src/linkUtils.ts","../src/link.ts"],"names":[],"mappings":"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","sourcesContent":["import Observable from 'zen-observable-ts';\n\nimport { GraphQLRequest, Operation } from './types';\nimport { ApolloLink } from './link';\n\nimport { getOperationName } from 'apollo-utilities';\nimport { invariant, InvariantError } from 'ts-invariant';\nexport { getOperationName };\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    'query',\n    'operationName',\n    'variables',\n    'extensions',\n    'context',\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new InvariantError(`illegal argument: ${key}`);\n    }\n  }\n\n  return operation;\n}\n\nexport class LinkError extends Error {\n  public link: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport function isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: data => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`,\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n\n// backwards compat\nexport const makePromise = toPromise;\n\nexport function fromPromise<T>(promise: Promise<T>): Observable<T> {\n  return new Observable<T>(observer => {\n    promise\n      .then((value: T) => {\n        observer.next(value);\n        observer.complete();\n      })\n      .catch(observer.error.bind(observer));\n  });\n}\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>(observer => {\n    observer.error(errorValue);\n  });\n}\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== 'string'\n        ? getOperationName(transformedOperation.query)\n        : '';\n  }\n\n  return transformedOperation as Operation;\n}\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest,\n): Operation {\n  let context = { ...starting };\n  const setContext = next => {\n    if (typeof next === 'function') {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext = () => ({ ...context });\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext,\n  });\n\n  Object.defineProperty(operation, 'toKey', {\n    enumerable: false,\n    value: () => getKey(operation),\n  });\n\n  return operation as Operation;\n}\n\nexport function getKey(operation: GraphQLRequest) {\n  // XXX We're assuming here that query and variables will be serialized in\n  // the same order, which might not always be true.\n  const { query, variables, operationName } = operation;\n  return JSON.stringify([operationName, query, variables]);\n}\n","import Observable from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  GraphQLRequest,\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n} from './types';\n\nimport {\n  validateOperation,\n  isTerminating,\n  LinkError,\n  transformOperation,\n  createOperation,\n} from './linkUtils';\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nexport function empty(): ApolloLink {\n  return new ApolloLink(() => Observable.of());\n}\n\nexport function from(links: ApolloLink[]): ApolloLink {\n  if (links.length === 0) return empty();\n  return links.map(toLink).reduce((x, y) => x.concat(y));\n}\n\nexport function split(\n  test: (op: Operation) => boolean,\n  left: ApolloLink | RequestHandler,\n  right?: ApolloLink | RequestHandler,\n): ApolloLink {\n  const leftLink = toLink(left);\n  const rightLink = toLink(right || new ApolloLink(passthrough));\n\n  if (isTerminating(leftLink) && isTerminating(rightLink)) {\n    return new ApolloLink(operation => {\n      return test(operation)\n        ? leftLink.request(operation) || Observable.of()\n        : rightLink.request(operation) || Observable.of();\n    });\n  } else {\n    return new ApolloLink((operation, forward) => {\n      return test(operation)\n        ? leftLink.request(operation, forward) || Observable.of()\n        : rightLink.request(operation, forward) || Observable.of();\n    });\n  }\n}\n\n// join two Links together\nexport const concat = (\n  first: ApolloLink | RequestHandler,\n  second: ApolloLink | RequestHandler,\n) => {\n  const firstLink = toLink(first);\n  if (isTerminating(firstLink)) {\n    invariant.warn(\n      new LinkError(\n        `You are calling concat on a terminating link, which will have no effect`,\n        firstLink,\n      ),\n    );\n    return firstLink;\n  }\n  const nextLink = toLink(second);\n\n  if (isTerminating(nextLink)) {\n    return new ApolloLink(\n      operation =>\n        firstLink.request(\n          operation,\n          op => nextLink.request(op) || Observable.of(),\n        ) || Observable.of(),\n    );\n  } else {\n    return new ApolloLink((operation, forward) => {\n      return (\n        firstLink.request(operation, op => {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of()\n      );\n    });\n  }\n};\n\nexport class ApolloLink {\n  public static empty = empty;\n  public static from = from;\n  public static split = split;\n  public static execute = execute;\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n}\n\nexport function execute(\n  link: ApolloLink,\n  operation: GraphQLRequest,\n): Observable<FetchResult> {\n  return (\n    link.request(\n      createOperation(\n        operation.context,\n        transformOperation(validateOperation(operation)),\n      ),\n    ) || Observable.of()\n  );\n}\n"]},"metadata":{},"sourceType":"module"}