{"ast":null,"code":"import { __extends } from 'tslib';\nimport ApolloClient__default from 'apollo-client';\nexport * from 'apollo-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nexport * from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nexport * from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nexport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nexport { default as gql } from 'graphql-tag';\nimport { invariant } from 'ts-invariant';\nvar PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache', 'name', 'version', 'resolvers', 'typeDefs', 'fragmentMatcher'];\nvar DefaultClient = function (_super) {\n  __extends(DefaultClient, _super);\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = this;\n    if (config) {\n      var diff = Object.keys(config).filter(function (key) {\n        return PRESET_CONFIG_KEYS.indexOf(key) === -1;\n      });\n      if (diff.length > 0) {\n        process.env.NODE_ENV === \"production\" || invariant.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\n      }\n    }\n    var request = config.request,\n      uri = config.uri,\n      credentials = config.credentials,\n      headers = config.headers,\n      fetch = config.fetch,\n      fetchOptions = config.fetchOptions,\n      clientState = config.clientState,\n      cacheRedirects = config.cacheRedirects,\n      errorCallback = config.onError,\n      name = config.name,\n      version = config.version,\n      resolvers = config.resolvers,\n      typeDefs = config.typeDefs,\n      fragmentMatcher = config.fragmentMatcher;\n    var cache = config.cache;\n    process.env.NODE_ENV === \"production\" ? invariant(!cache || !cacheRedirects, 1) : invariant(!cache || !cacheRedirects, 'Incompatible cache configuration. When not providing `cache`, ' + 'configure the provided instance with `cacheRedirects` instead.');\n    if (!cache) {\n      cache = cacheRedirects ? new InMemoryCache({\n        cacheRedirects: cacheRedirects\n      }) : new InMemoryCache();\n    }\n    var errorLink = errorCallback ? onError(errorCallback) : onError(function (_a) {\n      var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError;\n      if (graphQLErrors) {\n        graphQLErrors.forEach(function (_a) {\n          var message = _a.message,\n            locations = _a.locations,\n            path = _a.path;\n          return process.env.NODE_ENV === \"production\" || invariant.warn(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\n        });\n      }\n      if (networkError) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"[Network error]: \" + networkError);\n      }\n    });\n    var requestHandler = request ? new ApolloLink(function (operation, forward) {\n      return new Observable(function (observer) {\n        var handle;\n        Promise.resolve(operation).then(function (oper) {\n          return request(oper);\n        }).then(function () {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        }).catch(observer.error.bind(observer));\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    }) : false;\n    var httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch: fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {}\n    });\n    var link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(function (x) {\n      return !!x;\n    }));\n    var activeResolvers = resolvers;\n    var activeTypeDefs = typeDefs;\n    var activeFragmentMatcher = fragmentMatcher;\n    if (clientState) {\n      if (clientState.defaults) {\n        cache.writeData({\n          data: clientState.defaults\n        });\n      }\n      activeResolvers = clientState.resolvers;\n      activeTypeDefs = clientState.typeDefs;\n      activeFragmentMatcher = clientState.fragmentMatcher;\n    }\n    _this = _super.call(this, {\n      cache: cache,\n      link: link,\n      name: name,\n      version: version,\n      resolvers: activeResolvers,\n      typeDefs: activeTypeDefs,\n      fragmentMatcher: activeFragmentMatcher\n    }) || this;\n    return _this;\n  }\n  return DefaultClient;\n}(ApolloClient__default);\nexport default DefaultClient;","map":{"version":3,"sources":["../src/index.ts"],"names":["ApolloClient"],"mappings":"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","sourcesContent":["/* necessary for backward compat */\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\n\nimport { Operation, ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink, UriFunction } from 'apollo-link-http';\nimport { onError, ErrorLink } from 'apollo-link-error';\nimport { ApolloCache } from 'apollo-cache';\nimport { InMemoryCache, CacheResolverMap } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient, {\n  Resolvers,\n  LocalStateFragmentMatcher,\n} from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport { gql, HttpLink };\n\ntype ClientStateConfig = {\n  cache?: ApolloCache<any>;\n  defaults?: Record<string, any>;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: LocalStateFragmentMatcher;\n};\n\nexport interface PresetConfig {\n  request?: (operation: Operation) => Promise<void> | void;\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: any;\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n  fetchOptions?: HttpLink.Options;\n  clientState?: ClientStateConfig;\n  onError?: ErrorLink.ErrorHandler;\n  cacheRedirects?: CacheResolverMap;\n  cache?: ApolloCache<any>;\n  name?: string;\n  version?: string;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: LocalStateFragmentMatcher;\n  assumeImmutableResults?: boolean;\n}\n\n// Yes, these are the exact same as the `PresetConfig` interface. We're\n// defining these again so they can be used to verify that valid config\n// options are being used in the `DefaultClient` constructor, for clients\n// that aren't using Typescript. This duplication is unfortunate, and at\n// some point can likely be adjusted so these items are inferred from\n// the `PresetConfig` interface using a Typescript transform at compilation\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\n// working properly, so this will have to be re-visited at some point.\n// For now, when updating the properties of the `PresetConfig` interface,\n// please also update this constant.\nconst PRESET_CONFIG_KEYS = [\n  'request',\n  'uri',\n  'credentials',\n  'headers',\n  'fetch',\n  'fetchOptions',\n  'clientState',\n  'onError',\n  'cacheRedirects',\n  'cache',\n  'name',\n  'version',\n  'resolvers',\n  'typeDefs',\n  'fragmentMatcher',\n];\n\nexport default class DefaultClient<TCache> extends ApolloClient<TCache> {\n  constructor(config: PresetConfig = {}) {\n    if (config) {\n      const diff = Object.keys(config).filter(\n        key => PRESET_CONFIG_KEYS.indexOf(key) === -1,\n      );\n\n      if (diff.length > 0) {\n        invariant.warn(\n          'ApolloBoost was initialized with unsupported options: ' +\n            `${diff.join(' ')}`,\n        );\n      }\n    }\n\n    const {\n      request,\n      uri,\n      credentials,\n      headers,\n      fetch,\n      fetchOptions,\n      clientState,\n      cacheRedirects,\n      onError: errorCallback,\n      name,\n      version,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n    } = config;\n\n    let { cache } = config;\n\n    invariant(\n      !cache || !cacheRedirects,\n      'Incompatible cache configuration. When not providing `cache`, ' +\n        'configure the provided instance with `cacheRedirects` instead.',\n    );\n\n    if (!cache) {\n      cache = cacheRedirects\n        ? new InMemoryCache({ cacheRedirects })\n        : new InMemoryCache();\n    }\n\n    const errorLink = errorCallback\n      ? onError(errorCallback)\n      : onError(({ graphQLErrors, networkError }) => {\n          if (graphQLErrors) {\n            graphQLErrors.forEach(({ message, locations, path }) =>\n              // tslint:disable-next-line\n              invariant.warn(\n                `[GraphQL error]: Message: ${message}, Location: ` +\n                  `${locations}, Path: ${path}`,\n              ),\n            );\n          }\n          if (networkError) {\n            // tslint:disable-next-line\n            invariant.warn(`[Network error]: ${networkError}`);\n          }\n        });\n\n    const requestHandler = request\n      ? new ApolloLink(\n          (operation, forward) =>\n            new Observable(observer => {\n              let handle: any;\n              Promise.resolve(operation)\n                .then(oper => request(oper))\n                .then(() => {\n                  handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer),\n                  });\n                })\n                .catch(observer.error.bind(observer));\n\n              return () => {\n                if (handle) {\n                  handle.unsubscribe();\n                }\n              };\n            }),\n        )\n      : false;\n\n    const httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {},\n    });\n\n    const link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(\n      x => !!x,\n    ) as ApolloLink[]);\n\n    let activeResolvers = resolvers;\n    let activeTypeDefs = typeDefs;\n    let activeFragmentMatcher = fragmentMatcher;\n    if (clientState) {\n      if (clientState.defaults) {\n        cache.writeData({\n          data: clientState.defaults,\n        });\n      }\n      activeResolvers = clientState.resolvers;\n      activeTypeDefs = clientState.typeDefs;\n      activeFragmentMatcher = clientState.fragmentMatcher;\n    }\n\n    // super hacky, we will fix the types eventually\n    super({\n      cache,\n      link,\n      name,\n      version,\n      resolvers: activeResolvers,\n      typeDefs: activeTypeDefs,\n      fragmentMatcher: activeFragmentMatcher,\n    } as any);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}