{"ast":null,"code":"import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nvar fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nvar throwServerError = function (response, result, message) {\n  var error = new Error(message);\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return Promise.reject(parseError);\n      }\n    }).then(function (result) {\n      if (response.status >= 300) {\n        throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n      }\n      if (!Array.isArray(result) && !result.hasOwnProperty('data') && !result.hasOwnProperty('errors')) {\n        throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName) + \"'.\");\n      }\n      return result;\n    });\n  };\n};\nvar checkFetcher = function (fetcher) {\n  if (!fetcher && typeof fetch === 'undefined') {\n    var library = 'unfetch';\n    if (typeof window === 'undefined') library = 'node-fetch';\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n  }\n};\nvar createSignalIfSupported = function () {\n  if (typeof AbortController === 'undefined') return {\n    controller: false,\n    signal: false\n  };\n  var controller = new AbortController();\n  var signal = controller.signal;\n  return {\n    controller: controller,\n    signal: signal\n  };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n  var configs = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n  var options = __assign({}, fallbackConfig.options, {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n  var http = fallbackConfig.http;\n  configs.forEach(function (config) {\n    options = __assign({}, options, config.options, {\n      headers: __assign({}, options.headers, config.headers)\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign({}, http, config.http);\n  });\n  var operationName = operation.operationName,\n    extensions = operation.extensions,\n    variables = operation.variables,\n    query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};\nvar serializeFetchParameter = function (p, label) {\n  var serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n  var context = operation.getContext();\n  var contextURI = context.uri;\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return fallbackURI || '/graphql';\n  }\n};\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operation } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\n/*\n * Http Utilities: shared across links that make http requests\n */\n\n// XXX replace with actual typings when available\ndeclare var AbortController: any;\n\n//Used for any Error for data from the server\n//on a request with a Status >= 300\n//response contains no data or errors\nexport type ServerError = Error & {\n  response: Response;\n  result: Record<string, any>;\n  statusCode: number;\n};\n\n//Thrown when server's resonse is cannot be parsed\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any; //overrides headers in options\n  credentials?: any;\n}\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\n// The body of a GraphQL-over-HTTP-POST request.\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const throwServerError = (response, result, message) => {\n  const error = new Error(message) as ServerError;\n\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n\n  throw error;\n};\n\n//TODO: when conditional types come in ts 2.8, operations should be a generic type that extends Operation | Array<Operation>\nexport const parseAndCheckHttpResponse = operations => (response: Response) => {\n  return (\n    response\n      .text()\n      .then(bodyText => {\n        try {\n          return JSON.parse(bodyText);\n        } catch (err) {\n          const parseError = err as ServerParseError;\n          parseError.name = 'ServerParseError';\n          parseError.response = response;\n          parseError.statusCode = response.status;\n          parseError.bodyText = bodyText;\n          return Promise.reject(parseError);\n        }\n      })\n      //TODO: when conditional types come out then result should be T extends Array ? Array<FetchResult> : FetchResult\n      .then((result: any) => {\n        if (response.status >= 300) {\n          //Network error\n          throwServerError(\n            response,\n            result,\n            `Response not successful: Received status code ${response.status}`,\n          );\n        }\n        //TODO should really error per response in a Batch based on properties\n        //    - could be done in a validation link\n        if (\n          !Array.isArray(result) &&\n          !result.hasOwnProperty('data') &&\n          !result.hasOwnProperty('errors')\n        ) {\n          //Data error\n          throwServerError(\n            response,\n            result,\n            `Server response was missing for query '${\n              Array.isArray(operations)\n                ? operations.map(op => op.operationName)\n                : operations.operationName\n            }'.`,\n          );\n        }\n        return result;\n      })\n  );\n};\n\nexport const checkFetcher = (fetcher: WindowOrWorkerGlobalScope['fetch']) => {\n  if (!fetcher && typeof fetch === 'undefined') {\n    let library: string = 'unfetch';\n    if (typeof window === 'undefined') library = 'node-fetch';\n    throw new InvariantError(`\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\nyour environment like https://www.npmjs.com/package/${library}.\n\nFor example:\nimport fetch from '${library}';\nimport { createHttpLink } from 'apollo-link-http';\n\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });`);\n  }\n};\n\nexport const createSignalIfSupported = () => {\n  if (typeof AbortController === 'undefined')\n    return { controller: false, signal: false };\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  return { controller, signal };\n};\n\nexport const selectHttpOptionsAndBody = (\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) => {\n  let options: HttpConfig & Record<string, any> = {\n    ...fallbackConfig.options,\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials,\n  };\n  let http: HttpQueryOptions = fallbackConfig.http;\n\n  /*\n   * use the rest of the configs to populate the options\n   * configs later in the list will overwrite earlier fields\n   */\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    };\n    if (config.credentials) options.credentials = config.credentials;\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = print(query);\n\n  return {\n    options,\n    body,\n  };\n};\n\nexport const serializeFetchParameter = (p, label) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n\n//selects \"/graphql\" by default\nexport const selectURI = (\n  operation,\n  fallbackURI?: string | ((operation: Operation) => string),\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || '/graphql';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}