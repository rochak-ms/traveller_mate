{"ast":null,"code":"import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\nvar NetworkStatus;\n(function (NetworkStatus) {\n  NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n  NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n  NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n  NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n  NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n  NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n  NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n  return networkStatus < 7;\n}\nvar Observable = function (_super) {\n  __extends(Observable, _super);\n  function Observable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Observable.prototype[$$observable] = function () {\n    return this;\n  };\n  Observable.prototype['@@observable'] = function () {\n    return this;\n  };\n  return Observable;\n}(Observable$1);\nfunction isNonEmptyArray(value) {\n  return Array.isArray(value) && value.length > 0;\n}\nfunction isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n  var message = '';\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += \"GraphQL error: \" + errorMessage + \"\\n\";\n    });\n  }\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n  message = message.replace(/\\n$/, '');\n  return message;\n};\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n      networkError = _a.networkError,\n      errorMessage = _a.errorMessage,\n      extraInfo = _a.extraInfo;\n    var _this = _super.call(this, errorMessage) || this;\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n    if (!errorMessage) {\n      _this.message = generateErrorMessage(_this);\n    } else {\n      _this.message = errorMessage;\n    }\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n  return ApolloError;\n}(Error);\nvar FetchType;\n(function (FetchType) {\n  FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n  FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n  FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\nvar hasError = function (storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n  return storeValue && (storeValue.networkError || policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors));\n};\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      options = _a.options,\n      _b = _a.shouldSubscribe,\n      shouldSubscribe = _b === void 0 ? true : _b;\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.variables = options.variables || {};\n    _this.queryId = queryManager.generateQueryId();\n    _this.shouldSubscribe = shouldSubscribe;\n    var opDef = getOperationDefinition(options.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    _this.queryManager = queryManager;\n    return _this;\n  }\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.currentResult = function () {\n    var result = this.getCurrentResult();\n    if (result.data === undefined) {\n      result.data = {};\n    }\n    return result;\n  };\n  ObservableQuery.prototype.getCurrentResult = function () {\n    if (this.isTornDown) {\n      var lastResult = this.lastResult;\n      return {\n        data: !this.lastError && lastResult && lastResult.data || void 0,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error\n      };\n    }\n    var _a = this.queryManager.getCurrentQueryResult(this),\n      data = _a.data,\n      partial = _a.partial;\n    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n    var result;\n    var fetchPolicy = this.options.fetchPolicy;\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    if (queryStoreValue) {\n      var networkStatus = queryStoreValue.networkStatus;\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return {\n          data: void 0,\n          loading: false,\n          networkStatus: networkStatus,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          })\n        };\n      }\n      if (queryStoreValue.variables) {\n        this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n        this.variables = this.options.variables;\n      }\n      result = {\n        data: data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus: networkStatus\n      };\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n    } else {\n      var loading = isNetworkFetchPolicy || partial && fetchPolicy !== 'cache-only';\n      result = {\n        data: data,\n        loading: loading,\n        networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready\n      };\n    }\n    if (!partial) {\n      this.updateLastResult(__assign(__assign({}, result), {\n        stale: false\n      }));\n    }\n    return __assign(__assign({}, result), {\n      partial: partial\n    });\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    var snapshot = this.lastResultSnapshot;\n    return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && isEqual(snapshot.data, newResult.data));\n  };\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    var queryStore = this.queryManager.queryStore.get(this.queryId);\n    if (queryStore) {\n      queryStore.networkError = null;\n      queryStore.graphQLErrors = [];\n    }\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n    if (!isEqual(this.variables, variables)) {\n      this.variables = __assign(__assign({}, this.variables), variables);\n    }\n    if (!isEqual(this.options.variables, this.variables)) {\n      this.options.variables = __assign(__assign({}, this.options.variables), this.variables);\n    }\n    return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), {\n      fetchPolicy: fetchPolicy\n    }), FetchType.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 2) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: 'network-only'\n    });\n    var qid = this.queryManager.generateQueryId();\n    return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        return fetchMoreOptions.updateQuery(previousResult, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n      });\n      _this.queryManager.stopQuery(qid);\n      return fetchMoreResult;\n    }, function (error) {\n      _this.queryManager.stopQuery(qid);\n      throw error;\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (opts) {\n    var oldFetchPolicy = this.options.fetchPolicy;\n    this.options = __assign(__assign({}, this.options), opts);\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n    var fetchPolicy = opts.fetchPolicy;\n    return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' || oldFetchPolicy === 'standby' || fetchPolicy === 'network-only'), opts.fetchResults);\n  };\n  ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n    if (tryFetch === void 0) {\n      tryFetch = false;\n    }\n    if (fetchResults === void 0) {\n      fetchResults = true;\n    }\n    this.isTornDown = false;\n    variables = variables || this.variables;\n    if (!tryFetch && isEqual(variables, this.variables)) {\n      return this.observers.size && fetchResults ? this.result() : Promise.resolve();\n    }\n    this.variables = this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.queryManager.fetchQuery(this.queryId, this.options);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var _a = queryManager.getQueryWithPreviousResult(this.queryId),\n      previousResult = _a.previousResult,\n      variables = _a.variables,\n      document = _a.document;\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: variables\n      });\n    });\n    if (newResult) {\n      queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult) {\n    var previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);\n    return previousResult;\n  };\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n    try {\n      var subObserver = observer._subscription._observer;\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch (_a) {}\n    var first = !this.observers.size;\n    this.observers.add(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n    if (first) {\n      this.setUpQuery();\n    }\n    return function () {\n      if (_this.observers.delete(observer) && !_this.observers.size) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n  ObservableQuery.prototype.setUpQuery = function () {\n    var _this = this;\n    var _a = this,\n      queryManager = _a.queryManager,\n      queryId = _a.queryId;\n    if (this.shouldSubscribe) {\n      queryManager.addObservableQuery(queryId, this);\n    }\n    if (this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      queryManager.startPollingQuery(this.options, queryId);\n    }\n    var onError = function (error) {\n      _this.updateLastResult(__assign(__assign({}, _this.lastResult), {\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false\n      }));\n      iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n    };\n    queryManager.observeQuery(queryId, this.options, {\n      next: function (result) {\n        if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n          var previousResult_1 = _this.updateLastResult(result);\n          var _a = _this.options,\n            query_1 = _a.query,\n            variables = _a.variables,\n            fetchPolicy_1 = _a.fetchPolicy;\n          if (queryManager.transform(query_1).hasClientExports) {\n            queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n              var previousVariables = _this.variables;\n              _this.variables = _this.options.variables = variables;\n              if (!result.loading && previousResult_1 && fetchPolicy_1 !== 'cache-only' && queryManager.transform(query_1).serverQuery && !isEqual(previousVariables, variables)) {\n                _this.refetch();\n              } else {\n                iterateObserversSafely(_this.observers, 'next', result);\n              }\n            });\n          } else {\n            iterateObserversSafely(_this.observers, 'next', result);\n          }\n        }\n      },\n      error: onError\n    }).catch(onError);\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    var queryManager = this.queryManager;\n    this.isTornDown = true;\n    queryManager.stopPollingQuery(this.queryId);\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    queryManager.removeObservableQuery(this.queryId);\n    queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n  };\n  return ObservableQuery;\n}(Observable);\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n  var fetchPolicy = obsQuery.options.fetchPolicy;\n  process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 3) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\nvar MutationStore = function () {\n  function MutationStore() {\n    this.store = {};\n  }\n  MutationStore.prototype.getStore = function () {\n    return this.store;\n  };\n  MutationStore.prototype.get = function (mutationId) {\n    return this.store[mutationId];\n  };\n  MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n    this.store[mutationId] = {\n      mutation: mutation,\n      variables: variables || {},\n      loading: true,\n      error: null\n    };\n  };\n  MutationStore.prototype.markMutationError = function (mutationId, error) {\n    var mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = error;\n    }\n  };\n  MutationStore.prototype.markMutationResult = function (mutationId) {\n    var mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = null;\n    }\n  };\n  MutationStore.prototype.reset = function () {\n    this.store = {};\n  };\n  return MutationStore;\n}();\nvar QueryStore = function () {\n  function QueryStore() {\n    this.store = {};\n  }\n  QueryStore.prototype.getStore = function () {\n    return this.store;\n  };\n  QueryStore.prototype.get = function (queryId) {\n    return this.store[queryId];\n  };\n  QueryStore.prototype.initQuery = function (query) {\n    var previousQuery = this.store[query.queryId];\n    process.env.NODE_ENV === \"production\" ? invariant(!previousQuery || previousQuery.document === query.document || isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery || previousQuery.document === query.document || isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n    var isSetVariables = false;\n    var previousVariables = null;\n    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n    var networkStatus;\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n    var graphQLErrors = [];\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables: previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus: networkStatus,\n      metadata: query.metadata\n    };\n    if (typeof query.fetchMoreForQueryId === 'string' && this.store[query.fetchMoreForQueryId]) {\n      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;\n    }\n  };\n  QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n    if (typeof fetchMoreForQueryId === 'string' && this.store[fetchMoreForQueryId]) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  };\n  QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n    if (!this.store || !this.store[queryId]) return;\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  };\n  QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n    var storeValue = this.store && this.store[queryId];\n    if (storeValue) {\n      storeValue.networkError = null;\n      storeValue.previousVariables = null;\n      if (complete) {\n        storeValue.networkStatus = NetworkStatus.ready;\n      }\n    }\n  };\n  QueryStore.prototype.stopQuery = function (queryId) {\n    delete this.store[queryId];\n  };\n  QueryStore.prototype.reset = function (observableQueryIds) {\n    var _this = this;\n    Object.keys(this.store).forEach(function (queryId) {\n      if (observableQueryIds.indexOf(queryId) < 0) {\n        _this.stopQuery(queryId);\n      } else {\n        _this.store[queryId].networkStatus = NetworkStatus.loading;\n      }\n    });\n  };\n  return QueryStore;\n}();\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n      client = _a.client,\n      resolvers = _a.resolvers,\n      fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n    if (client) {\n      this.client = client;\n    }\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n      remoteResult = _a.remoteResult,\n      context = _a.context,\n      variables = _a.variables,\n      _b = _a.onlyRunForcedResolvers,\n      onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n        return [2, remoteResult];\n      });\n    });\n  };\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n      process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' + 'were specified. This means ApolloClient local resolver handling ' + 'has been disabled, and @client directives will be passed through ' + 'to your link chain.');\n    }\n    return null;\n  };\n  LocalState.prototype.serverQuery = function (document) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  };\n  LocalState.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var cache = this.cache;\n    var newContext = __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        if (cache.config) {\n          return cache.config.dataIdFromObject(obj);\n        } else {\n          process.env.NODE_ENV === \"production\" ? invariant(false, 6) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' + 'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n        }\n      }\n    });\n    return newContext;\n  };\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (context === void 0) {\n      context = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n      var _this = this;\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                process.env.NODE_ENV === \"production\" ? invariant(fragment, 7) : invariant(fragment, \"No fragment named \" + selection.name.value);\n              }\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n              return [2];\n            });\n          });\n        };\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n      var _this = this;\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n            if (resolve) {\n              resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }));\n            }\n          }\n        }\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n          if (!field.selectionSet) {\n            return result;\n          }\n          if (result == null) {\n            return result;\n          }\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n  return LocalState;\n}();\nfunction multiplex(inner) {\n  var observers = new Set();\n  var sub = null;\n  return new Observable(function (observer) {\n    observers.add(observer);\n    sub = sub || inner.subscribe({\n      next: function (value) {\n        observers.forEach(function (obs) {\n          return obs.next && obs.next(value);\n        });\n      },\n      error: function (error) {\n        observers.forEach(function (obs) {\n          return obs.error && obs.error(error);\n        });\n      },\n      complete: function () {\n        observers.forEach(function (obs) {\n          return obs.complete && obs.complete();\n        });\n      }\n    });\n    return function () {\n      if (observers.delete(observer) && !observers.size && sub) {\n        sub.unsubscribe();\n        sub = null;\n      }\n    };\n  });\n}\nfunction asyncMap(observable, mapFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n      error = observer.error,\n      complete = observer.complete;\n    var activeNextCount = 0;\n    var completed = false;\n    var handler = {\n      next: function (value) {\n        ++activeNextCount;\n        new Promise(function (resolve) {\n          resolve(mapFn(value));\n        }).then(function (result) {\n          --activeNextCount;\n          next && next.call(observer, result);\n          completed && handler.complete();\n        }, function (e) {\n          --activeNextCount;\n          error && error.call(observer, e);\n        });\n      },\n      error: function (e) {\n        error && error.call(observer, e);\n      },\n      complete: function () {\n        completed = true;\n        if (!activeNextCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var link = _a.link,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      store = _a.store,\n      _c = _a.onBroadcast,\n      onBroadcast = _c === void 0 ? function () {\n        return undefined;\n      } : _c,\n      _d = _a.ssrMode,\n      ssrMode = _d === void 0 ? false : _d,\n      _e = _a.clientAwareness,\n      clientAwareness = _e === void 0 ? {} : _e,\n      localState = _a.localState,\n      assumeImmutableResults = _a.assumeImmutableResults;\n    this.mutationStore = new MutationStore();\n    this.queryStore = new QueryStore();\n    this.clientAwareness = {};\n    this.idCounter = 1;\n    this.queries = new Map();\n    this.fetchQueryRejectFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.inFlightLinkObservables = new Map();\n    this.pollingInfoByQueryId = new Map();\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: store.getCache()\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError('QueryManager stopped while query was in flight'));\n    });\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueriesByName = _a.updateQueries,\n      _b = _a.refetchQueries,\n      refetchQueries = _b === void 0 ? [] : _b,\n      _c = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _c === void 0 ? false : _c,\n      updateWithProxyFn = _a.update,\n      _d = _a.errorPolicy,\n      errorPolicy = _d === void 0 ? 'none' : _d,\n      fetchPolicy = _a.fetchPolicy,\n      _e = _a.context,\n      context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, generateUpdateQueriesInfo, self;\n      var _this = this;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 9) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 10) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateQueryId();\n            mutation = this.transform(mutation).document;\n            this.setQuery(mutationId, function () {\n              return {\n                document: mutation\n              };\n            });\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n          case 2:\n            generateUpdateQueriesInfo = function () {\n              var ret = {};\n              if (updateQueriesByName) {\n                _this.queries.forEach(function (_a, queryId) {\n                  var observableQuery = _a.observableQuery;\n                  if (observableQuery) {\n                    var queryName = observableQuery.queryName;\n                    if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                      ret[queryId] = {\n                        updater: updateQueriesByName[queryName],\n                        query: _this.queryStore.get(queryId)\n                      };\n                    }\n                  }\n                });\n              }\n              return ret;\n            };\n            this.mutationStore.initMutation(mutationId, mutation, variables);\n            this.dataStore.markMutationInit({\n              mutationId: mutationId,\n              document: mutation,\n              variables: variables,\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n              optimisticResponse: optimisticResponse\n            });\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function (result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n                  self.mutationStore.markMutationResult(mutationId);\n                  if (fetchPolicy !== 'no-cache') {\n                    self.dataStore.markMutationResult({\n                      mutationId: mutationId,\n                      result: result,\n                      document: mutation,\n                      variables: variables,\n                      updateQueries: generateUpdateQueriesInfo(),\n                      update: updateWithProxyFn\n                    });\n                  }\n                  storeResult = result;\n                },\n                error: function (err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n                  self.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse\n                  });\n                  self.broadcastQueries();\n                  self.setQuery(mutationId, function () {\n                    return {\n                      document: null\n                    };\n                  });\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function () {\n                  if (error) {\n                    self.mutationStore.markMutationError(mutationId, error);\n                  }\n                  self.dataStore.markMutationComplete({\n                    mutationId: mutationId,\n                    optimisticResponse: optimisticResponse\n                  });\n                  self.broadcastQueries();\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n                  var refetchQueryPromises = [];\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n                          if (observableQuery && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    self.setQuery(mutationId, function () {\n                      return {\n                        document: null\n                      };\n                    });\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n                    resolve(storeResult);\n                  });\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n            query = this.transform(options.query).document;\n            variables = this.getVariables(query, options.variables);\n            if (!this.transform(query).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(query, variables, context)];\n          case 1:\n            variables = _e.sent();\n            _e.label = 2;\n          case 2:\n            options = __assign(__assign({}, options), {\n              variables: variables\n            });\n            isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n            needToFetch = isNetworkOnly;\n            if (!isNetworkOnly) {\n              _d = this.dataStore.getCache().diff({\n                query: query,\n                variables: variables,\n                returnPartialData: true,\n                optimistic: false\n              }), complete = _d.complete, result = _d.result;\n              needToFetch = !complete || fetchPolicy === 'cache-and-network';\n              storeResult = result;\n            }\n            shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n            if (hasDirectives(['live'], query)) shouldFetch = true;\n            requestId = this.idCounter++;\n            cancel = fetchPolicy !== 'no-cache' ? this.updateQueryWatch(queryId, query, options) : undefined;\n            this.setQuery(queryId, function () {\n              return {\n                document: query,\n                lastRequestId: requestId,\n                invalidated: true,\n                cancel: cancel\n              };\n            });\n            this.invalidate(fetchMoreForQueryId);\n            this.queryStore.initQuery({\n              queryId: queryId,\n              document: query,\n              storePreviousVariables: shouldFetch,\n              variables: variables,\n              isPoll: fetchType === FetchType.poll,\n              isRefetch: fetchType === FetchType.refetch,\n              metadata: metadata,\n              fetchMoreForQueryId: fetchMoreForQueryId\n            });\n            this.broadcastQueries();\n            if (shouldFetch) {\n              networkResult = this.fetchRequest({\n                requestId: requestId,\n                queryId: queryId,\n                document: query,\n                options: options,\n                fetchMoreForQueryId: fetchMoreForQueryId\n              }).catch(function (error) {\n                if (isApolloError(error)) {\n                  throw error;\n                } else {\n                  if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                    _this.invalidate(queryId);\n                    _this.invalidate(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                  }\n                  throw new ApolloError({\n                    networkError: error\n                  });\n                }\n              });\n              if (fetchPolicy !== 'cache-and-network') {\n                return [2, networkResult];\n              }\n              networkResult.catch(function () {});\n            }\n            this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n            this.invalidate(queryId);\n            this.invalidate(fetchMoreForQueryId);\n            if (this.transform(query).hasForcedResolvers) {\n              return [2, this.localState.runResolvers({\n                document: query,\n                remoteResult: {\n                  data: storeResult\n                },\n                context: context,\n                variables: variables,\n                onlyRunForcedResolvers: true\n              }).then(function (result) {\n                _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                _this.broadcastQueries();\n                return result;\n              })];\n            }\n            this.broadcastQueries();\n            return [2, {\n              data: storeResult\n            }];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n    var fetchPolicy = _a.fetchPolicy,\n      variables = _a.variables,\n      errorPolicy = _a.errorPolicy;\n    if (fetchPolicy === 'no-cache') {\n      this.setQuery(queryId, function () {\n        return {\n          newData: {\n            result: result.data,\n            complete: true\n          }\n        };\n      });\n    } else {\n      this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n    }\n  };\n  QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n    var _this = this;\n    function invoke(method, argument) {\n      if (observer[method]) {\n        try {\n          observer[method](argument);\n        } catch (e) {\n          process.env.NODE_ENV === \"production\" || invariant.error(e);\n        }\n      } else if (method === 'error') {\n        process.env.NODE_ENV === \"production\" || invariant.error(argument);\n      }\n    }\n    return function (queryStoreValue, newData) {\n      _this.invalidate(queryId, false);\n      if (!queryStoreValue) return;\n      var _a = _this.getQuery(queryId),\n        observableQuery = _a.observableQuery,\n        document = _a.document;\n      var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;\n      if (fetchPolicy === 'standby') return;\n      var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n      var lastResult = observableQuery && observableQuery.getLastResult();\n      var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== queryStoreValue.networkStatus);\n      var shouldNotifyIfLoading = options.returnPartialData || !newData && queryStoreValue.previousVariables || networkStatusChanged && options.notifyOnNetworkStatusChange || fetchPolicy === 'cache-only' || fetchPolicy === 'cache-and-network';\n      if (loading && !shouldNotifyIfLoading) {\n        return;\n      }\n      var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n      var errorPolicy = observableQuery && observableQuery.options.errorPolicy || options.errorPolicy || 'none';\n      if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n        return invoke('error', new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError\n        }));\n      }\n      try {\n        var data = void 0;\n        var isMissing = void 0;\n        if (newData) {\n          if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n            _this.setQuery(queryId, function () {\n              return {\n                newData: null\n              };\n            });\n          }\n          data = newData.result;\n          isMissing = !newData.complete;\n        } else {\n          var lastError = observableQuery && observableQuery.getLastError();\n          var errorStatusChanged = errorPolicy !== 'none' && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors;\n          if (lastResult && lastResult.data && !errorStatusChanged) {\n            data = lastResult.data;\n            isMissing = false;\n          } else {\n            var diffResult = _this.dataStore.getCache().diff({\n              query: document,\n              variables: queryStoreValue.previousVariables || queryStoreValue.variables,\n              returnPartialData: true,\n              optimistic: true\n            });\n            data = diffResult.result;\n            isMissing = !diffResult.complete;\n          }\n        }\n        var stale = isMissing && !(options.returnPartialData || fetchPolicy === 'cache-only');\n        var resultFromStore = {\n          data: stale ? lastResult && lastResult.data : data,\n          loading: loading,\n          networkStatus: queryStoreValue.networkStatus,\n          stale: stale\n        };\n        if (errorPolicy === 'all' && hasGraphQLErrors) {\n          resultFromStore.errors = queryStoreValue.graphQLErrors;\n        }\n        invoke('next', resultFromStore);\n      } catch (networkError) {\n        invoke('error', new ApolloError({\n          networkError: networkError\n        }));\n      }\n    };\n  };\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var cache = this.dataStore.getCache();\n      var transformed = cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n    if (shouldSubscribe === void 0) {\n      shouldSubscribe = true;\n    }\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 11) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n    options.variables = this.getVariables(options.query, options.variables);\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var transformedOptions = __assign({}, options);\n    return new ObservableQuery({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe\n    });\n  };\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 12) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 13) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    return new Promise(function (resolve, reject) {\n      var watchedQuery = _this.watchQuery(options, false);\n      _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n      watchedQuery.result().then(resolve, reject).then(function () {\n        return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n      });\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.idCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(queryId);\n  };\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.setQuery(queryId, function (_a) {\n      var listeners = _a.listeners;\n      listeners.add(listener);\n      return {\n        invalidated: false\n      };\n    });\n  };\n  QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n    var _this = this;\n    var cancel = this.getQuery(queryId).cancel;\n    if (cancel) cancel();\n    var previousResult = function () {\n      var previousResult = null;\n      var observableQuery = _this.getQuery(queryId).observableQuery;\n      if (observableQuery) {\n        var lastResult = observableQuery.getLastResult();\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n      return previousResult;\n    };\n    return this.dataStore.getCache().watch({\n      query: document,\n      variables: options.variables,\n      optimistic: true,\n      previousResult: previousResult,\n      callback: function (newData) {\n        _this.setQuery(queryId, function () {\n          return {\n            invalidated: true,\n            newData: newData\n          };\n        });\n      }\n    });\n  };\n  QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: observableQuery\n      };\n    });\n  };\n  QueryManager.prototype.removeObservableQuery = function (queryId) {\n    var cancel = this.getQuery(queryId).cancel;\n    this.setQuery(queryId, function () {\n      return {\n        observableQuery: null\n      };\n    });\n    if (cancel) cancel();\n  };\n  QueryManager.prototype.clearStore = function () {\n    this.fetchQueryRejectFns.forEach(function (reject) {\n      reject(process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    });\n    var resetIds = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) resetIds.push(queryId);\n    });\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n    return this.dataStore.reset();\n  };\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        _this.setQuery(queryId, function () {\n          return {\n            newData: null\n          };\n        });\n        _this.invalidate(queryId);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n    this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n    return this.fetchQuery(queryId, options);\n  };\n  QueryManager.prototype.startQuery = function (queryId, options, listener) {\n    process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n    this.addQueryListener(queryId, listener);\n    this.fetchQuery(queryId, options).catch(function () {\n      return undefined;\n    });\n    return queryId;\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      variables = _a.variables;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          _this.dataStore.markSubscriptionResult(result, query, variables);\n          _this.broadcastQueries();\n        }\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n        return result;\n      });\n    };\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n    this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n    this.getQuery(queryId).subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n  QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n    var _a = observableQuery.options,\n      variables = _a.variables,\n      query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      returnPartialData = _a.returnPartialData;\n    var lastResult = observableQuery.getLastResult();\n    var newData = this.getQuery(observableQuery.queryId).newData;\n    if (newData && newData.complete) {\n      return {\n        data: newData.result,\n        partial: false\n      };\n    }\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return {\n        data: undefined,\n        partial: false\n      };\n    }\n    var _b = this.dataStore.getCache().diff({\n        query: query,\n        variables: variables,\n        previousResult: lastResult ? lastResult.data : undefined,\n        returnPartialData: true,\n        optimistic: optimistic\n      }),\n      result = _b.result,\n      complete = _b.complete;\n    return {\n      data: complete || returnPartialData ? result : void 0,\n      partial: !complete\n    };\n  };\n  QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n    var observableQuery;\n    if (typeof queryIdOrObservable === 'string') {\n      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n      process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n      observableQuery = foundObserveableQuery;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n    var _a = observableQuery.options,\n      variables = _a.variables,\n      query = _a.query;\n    return {\n      previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n      variables: variables,\n      document: query\n    };\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    var _this = this;\n    this.onBroadcast();\n    this.queries.forEach(function (info, id) {\n      if (info.invalidated) {\n        info.listeners.forEach(function (listener) {\n          if (listener) {\n            listener(_this.queryStore.get(id), info.newData);\n          }\n        });\n      }\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    if (deduplication === void 0) {\n      deduplication = this.queryDeduplication;\n    }\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n    if (serverQuery) {\n      var _a = this,\n        inFlightLinkObservables_1 = _a.inFlightLinkObservables,\n        link = _a.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n          var cleanup = function () {\n            byVariables_1.delete(varJson_1);\n            if (!byVariables_1.size) inFlightLinkObservables_1.delete(serverQuery);\n            cleanupSub_1.unsubscribe();\n          };\n          var cleanupSub_1 = observable.subscribe({\n            next: cleanup,\n            error: cleanup,\n            complete: cleanup\n          });\n        }\n      } else {\n        observable = multiplex(execute(link, operation));\n      }\n    } else {\n      observable = Observable.of({\n        data: {}\n      });\n      context = this.prepareContext(context);\n    }\n    var clientQuery = this.transform(query).clientQuery;\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.fetchRequest = function (_a) {\n    var _this = this;\n    var requestId = _a.requestId,\n      queryId = _a.queryId,\n      document = _a.document,\n      options = _a.options,\n      fetchMoreForQueryId = _a.fetchMoreForQueryId;\n    var variables = options.variables,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? 'none' : _b,\n      fetchPolicy = options.fetchPolicy;\n    var resultFromStore;\n    var errorsFromStore;\n    return new Promise(function (resolve, reject) {\n      var observable = _this.getObservableFromLink(document, options.context, variables);\n      var fqrfId = \"fetchRequest:\" + queryId;\n      _this.fetchQueryRejectFns.set(fqrfId, reject);\n      var cleanup = function () {\n        _this.fetchQueryRejectFns.delete(fqrfId);\n        _this.setQuery(queryId, function (_a) {\n          var subscriptions = _a.subscriptions;\n          subscriptions.delete(subscription);\n        });\n      };\n      var subscription = observable.map(function (result) {\n        if (requestId >= _this.getQuery(queryId).lastRequestId) {\n          _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n          _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n          _this.invalidate(queryId);\n          _this.invalidate(fetchMoreForQueryId);\n          _this.broadcastQueries();\n        }\n        if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n          return reject(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n        if (errorPolicy === 'all') {\n          errorsFromStore = result.errors;\n        }\n        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n          resultFromStore = result.data;\n        } else {\n          var _a = _this.dataStore.getCache().diff({\n              variables: variables,\n              query: document,\n              optimistic: false,\n              returnPartialData: true\n            }),\n            result_1 = _a.result,\n            complete = _a.complete;\n          if (complete || options.returnPartialData) {\n            resultFromStore = result_1;\n          }\n        }\n      }).subscribe({\n        error: function (error) {\n          cleanup();\n          reject(error);\n        },\n        complete: function () {\n          cleanup();\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false\n          });\n        }\n      });\n      _this.setQuery(queryId, function (_a) {\n        var subscriptions = _a.subscriptions;\n        subscriptions.add(subscription);\n      });\n    });\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    return this.queries.get(queryId) || {\n      listeners: new Set(),\n      invalidated: false,\n      document: null,\n      newData: null,\n      lastRequestId: 1,\n      observableQuery: null,\n      subscriptions: new Set()\n    };\n  };\n  QueryManager.prototype.setQuery = function (queryId, updater) {\n    var prev = this.getQuery(queryId);\n    var newInfo = __assign(__assign({}, prev), updater(prev));\n    this.queries.set(queryId, newInfo);\n  };\n  QueryManager.prototype.invalidate = function (queryId, invalidated) {\n    if (invalidated === void 0) {\n      invalidated = true;\n    }\n    if (queryId) {\n      this.setQuery(queryId, function () {\n        return {\n          invalidated: invalidated\n        };\n      });\n    }\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  QueryManager.prototype.checkInFlight = function (queryId) {\n    var query = this.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n  QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n    var _this = this;\n    var pollInterval = options.pollInterval;\n    process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 18) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n    if (!this.ssrMode) {\n      var info = this.pollingInfoByQueryId.get(queryId);\n      if (!info) {\n        this.pollingInfoByQueryId.set(queryId, info = {});\n      }\n      info.interval = pollInterval;\n      info.options = __assign(__assign({}, options), {\n        fetchPolicy: 'network-only'\n      });\n      var maybeFetch_1 = function () {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          if (_this.checkInFlight(queryId)) {\n            poll_1();\n          } else {\n            _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n          }\n        }\n      };\n      var poll_1 = function () {\n        var info = _this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          clearTimeout(info.timeout);\n          info.timeout = setTimeout(maybeFetch_1, info.interval);\n        }\n      };\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n      poll_1();\n    }\n    return queryId;\n  };\n  QueryManager.prototype.stopPollingQuery = function (queryId) {\n    this.pollingInfoByQueryId.delete(queryId);\n  };\n  return QueryManager;\n}();\nvar DataStore = function () {\n  function DataStore(initialCache) {\n    this.cache = initialCache;\n  }\n  DataStore.prototype.getCache = function () {\n    return this.cache;\n  };\n  DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n    if (ignoreErrors === void 0) {\n      ignoreErrors = false;\n    }\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n  DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables\n      });\n    }\n  };\n  DataStore.prototype.markMutationInit = function (mutation) {\n    var _this = this;\n    if (mutation.optimisticResponse) {\n      var optimistic_1;\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic_1 = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic_1 = mutation.optimisticResponse;\n      }\n      this.cache.recordOptimisticTransaction(function (c) {\n        var orig = _this.cache;\n        _this.cache = c;\n        try {\n          _this.markMutationResult({\n            mutationId: mutation.mutationId,\n            result: {\n              data: optimistic_1\n            },\n            document: mutation.document,\n            variables: mutation.variables,\n            updateQueries: mutation.updateQueries,\n            update: mutation.update\n          });\n        } finally {\n          _this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  };\n  DataStore.prototype.markMutationResult = function (mutation) {\n    var _this = this;\n    if (!graphQLResultHasError(mutation.result)) {\n      var cacheWrites_1 = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      }];\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        Object.keys(updateQueries_1).forEach(function (id) {\n          var _a = updateQueries_1[id],\n            query = _a.query,\n            updater = _a.updater;\n          var _b = _this.cache.diff({\n              query: query.document,\n              variables: query.variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _b.result,\n            complete = _b.complete;\n          if (complete) {\n            var nextQueryResult = tryFunctionOrLogError(function () {\n              return updater(currentQueryResult, {\n                mutationResult: mutation.result,\n                queryName: getOperationName(query.document) || undefined,\n                queryVariables: query.variables\n              });\n            });\n            if (nextQueryResult) {\n              cacheWrites_1.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: query.document,\n                variables: query.variables\n              });\n            }\n          }\n        });\n      }\n      this.cache.performTransaction(function (c) {\n        cacheWrites_1.forEach(function (write) {\n          return c.write(write);\n        });\n        var update = mutation.update;\n        if (update) {\n          tryFunctionOrLogError(function () {\n            return update(c, mutation.result);\n          });\n        }\n      });\n    }\n  };\n  DataStore.prototype.markMutationComplete = function (_a) {\n    var mutationId = _a.mutationId,\n      optimisticResponse = _a.optimisticResponse;\n    if (optimisticResponse) {\n      this.cache.removeOptimistic(mutationId);\n    }\n  };\n  DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables: variables,\n      query: document\n    });\n  };\n  DataStore.prototype.reset = function () {\n    return this.cache.reset();\n  };\n  return DataStore;\n}();\nvar version = \"2.6.10\";\nvar hasSuggestedDevtools = false;\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n    this.defaultOptions = {};\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    var cache = options.cache,\n      _a = options.ssrMode,\n      ssrMode = _a === void 0 ? false : _a,\n      _b = options.ssrForceFetchDelay,\n      ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n      connectToDevTools = options.connectToDevTools,\n      _c = options.queryDeduplication,\n      queryDeduplication = _c === void 0 ? true : _c,\n      defaultOptions = options.defaultOptions,\n      _d = options.assumeImmutableResults,\n      assumeImmutableResults = _d === void 0 ? false : _d,\n      resolvers = options.resolvers,\n      typeDefs = options.typeDefs,\n      fragmentMatcher = options.fragmentMatcher,\n      clientAwarenessName = options.name,\n      clientAwarenessVersion = options.version;\n    var link = options.link;\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n    if (!link || !cache) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" + \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" + \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n    }\n    this.link = link;\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n    if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Chrome') > -1) {\n            console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n          }\n        }\n      }\n    }\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: function () {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.queryStore.getStore(),\n              mutations: _this.queryManager.mutationStore.getStore()\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      }\n    });\n  }\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = __assign(__assign({}, this.defaultOptions.watchQuery), options);\n    }\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.watchQuery(options);\n  };\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = __assign(__assign({}, this.defaultOptions.query), options);\n    }\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 5) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.');\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.query(options);\n  };\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = __assign(__assign({}, this.defaultOptions.mutate), options);\n    }\n    return this.queryManager.mutate(options);\n  };\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readQuery(options, optimistic);\n  };\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readFragment(options, optimistic);\n  };\n  ApolloClient.prototype.writeQuery = function (options) {\n    var result = this.cache.writeQuery(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  ApolloClient.prototype.writeFragment = function (options) {\n    var result = this.cache.writeFragment(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  ApolloClient.prototype.writeData = function (options) {\n    var result = this.cache.writeData(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  };\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  ApolloClient.prototype.initQueryManager = function () {\n    process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' + 'and it will be removed from ApolloClient in version 3.0.');\n    return this.queryManager;\n  };\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n  return ApolloClient;\n}();\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };","map":{"version":3,"sources":["../src/core/networkStatus.ts","../src/util/Observable.ts","../src/util/arrays.ts","../src/errors/ApolloError.ts","../src/core/types.ts","../src/core/ObservableQuery.ts","../src/data/mutations.ts","../src/data/queries.ts","../src/util/capitalizeFirstLetter.ts","../src/core/LocalState.ts","../src/util/observables.ts","../src/core/QueryManager.ts","../src/data/store.ts","../src/version.ts","../src/ApolloClient.ts"],"names":["LinkObservable"],"mappings":"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","sourcesContent":["/**\n * The current status of a query’s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus: NetworkStatus,\n): boolean {\n  return networkStatus < 7;\n}\n","// This simplified polyfill attempts to follow the ECMAScript Observable proposal.\n// See https://github.com/zenparsing/es-observable\nimport { Observable as LinkObservable } from 'apollo-link';\n\nexport type Subscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\n\nimport $$observable from 'symbol-observable';\n\n// rxjs interopt\nexport class Observable<T> extends LinkObservable<T> {\n  public [$$observable]() {\n    return this;\n  }\n\n  public ['@@observable' as any]() {\n    return this;\n  }\n}\n","export function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n","import { GraphQLError } from 'graphql';\nimport { isNonEmptyArray } from '../util/arrays';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach((graphQLError: GraphQLError) => {\n      const errorMessage = graphQLError\n        ? graphQLError.message\n        : 'Error message not found.';\n      message += `GraphQL error: ${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += 'Network error: ' + err.networkError.message + '\\n';\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLError>;\n  public networkError: Error | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    networkError?: Error | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.networkError = networkError || null;\n\n    if (!errorMessage) {\n      this.message = generateErrorMessage(this);\n    } else {\n      this.message = errorMessage;\n    }\n\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n","import { FetchResult } from 'apollo-link';\nimport { DocumentNode, GraphQLError } from 'graphql';\n\nimport { QueryStoreValue } from '../data/queries';\nimport { NetworkStatus } from './networkStatus';\nimport { Resolver } from './LocalState';\n\nexport type QueryListener = (\n  queryStoreValue: QueryStoreValue,\n  newData?: any,\n  forceResolvers?: boolean,\n) => void;\n\nexport type OperationVariables = { [key: string]: any };\n\nexport type PureQueryOptions = {\n  query: DocumentNode;\n  variables?: { [key: string]: any };\n  context?: any;\n};\n\nexport type ApolloQueryResult<T> = {\n  data: T;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  stale: boolean;\n};\n\nexport enum FetchType {\n  normal = 1,\n  refetch = 2,\n  poll = 3,\n}\n\n// This is part of the public API, people write these functions in `updateQueries`.\nexport type MutationQueryReducer<T> = (\n  previousResult: Record<string, any>,\n  options: {\n    mutationResult: FetchResult<T>;\n    queryName: string | undefined;\n    queryVariables: Record<string, any>;\n  },\n) => Record<string, any>;\n\nexport type MutationQueryReducersMap<T = { [key: string]: any }> = {\n  [queryName: string]: MutationQueryReducer<T>;\n};\n\nexport interface Resolvers {\n  [key: string]: {\n    [ field: string ]: Resolver;\n  };\n}\n","import {\n  isEqual,\n  tryFunctionOrLogError,\n  cloneDeep,\n  getOperationDefinition,\n} from 'apollo-utilities';\nimport { GraphQLError } from 'graphql';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable, Observer, Subscription } from '../util/Observable';\nimport { ApolloError } from '../errors/ApolloError';\nimport { QueryManager } from './QueryManager';\nimport { ApolloQueryResult, FetchType, OperationVariables } from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ErrorPolicy,\n} from './watchQueryOptions';\n\nimport { QueryStoreValue } from '../data/queries';\n\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isNonEmptyArray } from '../util/arrays';\n\n// XXX remove in the next breaking semver change (3.0)\n// Deprecated, use ApolloCurrentQueryResult\nexport type ApolloCurrentResult<T> = {\n  data: T | {};\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n};\n\nexport type ApolloCurrentQueryResult<T> = {\n  data: T | undefined;\n  errors?: ReadonlyArray<GraphQLError>;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  error?: ApolloError;\n  partial?: boolean;\n  stale?: boolean;\n};\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\nexport const hasError = (\n  storeValue: QueryStoreValue,\n  policy: ErrorPolicy = 'none',\n) => storeValue && (\n  storeValue.networkError ||\n  (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors))\n);\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public options: WatchQueryOptions<TVariables>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n  /**\n   *\n   * The current value of the variables for this query. Can change.\n   */\n  public variables: TVariables;\n\n  private shouldSubscribe: boolean;\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<Subscription>();\n\n  private lastResult: ApolloQueryResult<TData>;\n  private lastResultSnapshot: ApolloQueryResult<TData>;\n  private lastError: ApolloError;\n\n  constructor({\n    queryManager,\n    options,\n    shouldSubscribe = true,\n  }: {\n    queryManager: QueryManager<any>;\n    options: WatchQueryOptions<TVariables>;\n    shouldSubscribe?: boolean;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) =>\n      this.onSubscribe(observer),\n    );\n\n    // active state\n    this.isTornDown = false;\n\n    // query information\n    this.options = options;\n    this.variables = options.variables || ({} as TVariables);\n    this.queryId = queryManager.generateQueryId();\n    this.shouldSubscribe = shouldSubscribe;\n\n    const opDef = getOperationDefinition(options.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n\n    // related classes\n    this.queryManager = queryManager;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  // XXX remove in the next breaking semver change (3.0)\n  // Deprecated, use getCurrentResult()\n  public currentResult(): ApolloCurrentResult<TData> {\n    const result = this.getCurrentResult() as ApolloCurrentResult<TData>;\n    if (result.data === undefined) {\n      result.data = {};\n    }\n    return result;\n  }\n\n  /**\n   * Return the result of the query from the local cache as well as some fetching status\n   * `loading` and `networkStatus` allow to know if a request is in flight\n   * `partial` lets you know if the result from the local cache is complete or partial\n   * @return {data: Object, error: ApolloError, loading: boolean, networkStatus: number, partial: boolean}\n   */\n  public getCurrentResult(): ApolloCurrentQueryResult<TData> {\n    if (this.isTornDown) {\n      const { lastResult } = this;\n      return {\n        data: !this.lastError && lastResult && lastResult.data || void 0,\n        error: this.lastError,\n        loading: false,\n        networkStatus: NetworkStatus.error,\n      };\n    }\n\n    const { data, partial } = this.queryManager.getCurrentQueryResult(this);\n    const queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n    let result: ApolloQueryResult<TData>;\n\n    const { fetchPolicy } = this.options;\n\n    const isNetworkFetchPolicy =\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache';\n\n    if (queryStoreValue) {\n      const { networkStatus } = queryStoreValue;\n\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return {\n          data: void 0,\n          loading: false,\n          networkStatus,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError,\n          }),\n        };\n      }\n\n      // Variables might have been added dynamically at query time, when\n      // using `@client @export(as: \"varname\")` for example. When this happens,\n      // the variables have been updated in the query store, but not updated on\n      // the original `ObservableQuery`. We'll update the observable query\n      // variables here to match, so retrieving from the cache doesn't fail.\n      if (queryStoreValue.variables) {\n        this.options.variables = {\n          ...this.options.variables,\n          ...(queryStoreValue.variables as TVariables),\n        };\n        this.variables = this.options.variables;\n      }\n\n      result = {\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n      } as ApolloQueryResult<TData>;\n\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n\n    } else {\n      // We need to be careful about the loading state we show to the user, to try\n      // and be vaguely in line with what the user would have seen from .subscribe()\n      // but to still provide useful information synchronously when the query\n      // will not end up hitting the server.\n      // See more: https://github.com/apollostack/apollo-client/issues/707\n      // Basically: is there a query in flight right now (modolo the next tick)?\n      const loading = isNetworkFetchPolicy ||\n        (partial && fetchPolicy !== 'cache-only');\n\n      result = {\n        data,\n        loading,\n        networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n      } as ApolloQueryResult<TData>;\n    }\n\n    if (!partial) {\n      this.updateLastResult({ ...result, stale: false });\n    }\n\n    return { ...result, partial };\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    const { lastResultSnapshot: snapshot } = this;\n    return !(\n      snapshot &&\n      newResult &&\n      snapshot.networkStatus === newResult.networkStatus &&\n      snapshot.stale === newResult.stale &&\n      isEqual(snapshot.data, newResult.data)\n    );\n  }\n\n  // Returns the last result that observer.next was called with. This is not the same as\n  // getCurrentResult! If you're not sure which you need, then you probably need getCurrentResult.\n  public getLastResult(): ApolloQueryResult<TData> {\n    return this.lastResult;\n  }\n\n  public getLastError(): ApolloError {\n    return this.lastError;\n  }\n\n  public resetLastResults(): void {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    const queryStore = this.queryManager.queryStore.get(this.queryId);\n    if (queryStore) {\n      queryStore.networkError = null;\n      queryStore.graphQLErrors = [];\n    }\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: TVariables): Promise<ApolloQueryResult<TData>> {\n    let { fetchPolicy } = this.options;\n    // early return if trying to read from cache during refetch\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(new InvariantError(\n        'cache-only fetchPolicy option should not be used together with query refetch.',\n      ));\n    }\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    if (fetchPolicy !== 'no-cache' &&\n        fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n\n    if (!isEqual(this.variables, variables)) {\n      // update observable variables\n      this.variables = {\n        ...this.variables,\n        ...variables,\n      };\n    }\n\n    if (!isEqual(this.options.variables, this.variables)) {\n      // Update the existing options with new variables\n      this.options.variables = {\n        ...this.options.variables,\n        ...this.variables,\n      };\n    }\n\n    return this.queryManager.fetchQuery(\n      this.queryId,\n      { ...this.options, fetchPolicy },\n      FetchType.refetch,\n    ) as Promise<ApolloQueryResult<TData>>;\n  }\n\n  public fetchMore<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>,\n  ): Promise<ApolloQueryResult<TData>> {\n    // early return if no update Query\n    invariant(\n      fetchMoreOptions.updateQuery,\n      'updateQuery option is required. This function defines how to update the query data with the new results.',\n    );\n\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      fetchPolicy: 'network-only',\n    } as WatchQueryOptions;\n\n    const qid = this.queryManager.generateQueryId();\n\n    return this.queryManager\n      .fetchQuery(\n        qid,\n        combinedOptions,\n        FetchType.normal,\n        this.queryId,\n      )\n      .then(\n        fetchMoreResult => {\n          this.updateQuery((previousResult: any) =>\n            fetchMoreOptions.updateQuery(previousResult, {\n              fetchMoreResult: fetchMoreResult.data as TData,\n              variables: combinedOptions.variables as TVariables,\n            }),\n          );\n          this.queryManager.stopQuery(qid);\n          return fetchMoreResult as ApolloQueryResult<TData>;\n        },\n        error => {\n          this.queryManager.stopQuery(qid);\n          throw error;\n        },\n      );\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  // Note: if the query is not active (there are no subscribers), the promise\n  // will return null immediately.\n  public setOptions(\n    opts: WatchQueryOptions,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    const { fetchPolicy: oldFetchPolicy } = this.options;\n    this.options = {\n      ...this.options,\n      ...opts,\n    } as WatchQueryOptions<TVariables>;\n\n    if (opts.pollInterval) {\n      this.startPolling(opts.pollInterval);\n    } else if (opts.pollInterval === 0) {\n      this.stopPolling();\n    }\n\n    const { fetchPolicy } = opts;\n\n    return this.setVariables(\n      this.options.variables as TVariables,\n      // Try to fetch the query if fetchPolicy changed from either cache-only\n      // or standby to something else, or changed to network-only.\n      oldFetchPolicy !== fetchPolicy && (\n        oldFetchPolicy === 'cache-only' ||\n        oldFetchPolicy === 'standby' ||\n        fetchPolicy === 'network-only'\n      ),\n      opts.fetchResults,\n    );\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   *\n   * @param tryFetch: Try and fetch new results even if the variables haven't\n   * changed (we may still just hit the store, but if there's nothing in there\n   * this will refetch)\n   *\n   * @param fetchResults: Option to ignore fetching results when updating variables\n   */\n  public setVariables(\n    variables: TVariables,\n    tryFetch: boolean = false,\n    fetchResults = true,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    // since setVariables restarts the subscription, we reset the tornDown status\n    this.isTornDown = false;\n\n    variables = variables || this.variables;\n\n    if (!tryFetch && isEqual(variables, this.variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size && fetchResults\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.variables = this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    // Use the same options as before, but with new variables\n    return this.queryManager.fetchQuery(\n      this.queryId,\n      this.options,\n    ) as Promise<ApolloQueryResult<TData>>;\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const {\n      previousResult,\n      variables,\n      document,\n    } = queryManager.getQueryWithPreviousResult<TData, TVars>(\n      this.queryId,\n    );\n\n    const newResult = tryFunctionOrLogError(() =>\n      mapFn(previousResult, { variables }),\n    );\n\n    if (newResult) {\n      queryManager.dataStore.markUpdateQueryResult(\n        document,\n        variables,\n        newResult,\n      );\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public stopPolling() {\n    this.queryManager.stopPollingQuery(this.queryId);\n    this.options.pollInterval = undefined;\n  }\n\n  public startPolling(pollInterval: number) {\n    assertNotCacheFirstOrOnly(this);\n    this.options.pollInterval = pollInterval;\n    this.queryManager.startPollingQuery(this.options, this.queryId);\n  }\n\n  private updateLastResult(newResult: ApolloQueryResult<TData>) {\n    const previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n      ? newResult\n      : cloneDeep(newResult);\n    return previousResult;\n  }\n\n  private onSubscribe(observer: Observer<ApolloQueryResult<TData>>) {\n    // Zen Observable has its own error function, so in order to log correctly\n    // we need to provide a custom error callback.\n    try {\n      var subObserver = (observer as any)._subscription._observer;\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch {}\n\n    const first = !this.observers.size;\n    this.observers.add(observer);\n\n    // Deliver initial result\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n\n    // setup the query if it hasn't been done before\n    if (first) {\n      this.setUpQuery();\n    }\n\n    return () => {\n      if (this.observers.delete(observer) && !this.observers.size) {\n        this.tearDownQuery();\n      }\n    };\n  }\n\n  private setUpQuery() {\n    const { queryManager, queryId } = this;\n\n    if (this.shouldSubscribe) {\n      queryManager.addObservableQuery<TData>(queryId, this);\n    }\n\n    if (this.options.pollInterval) {\n      assertNotCacheFirstOrOnly(this);\n      queryManager.startPollingQuery(this.options, queryId);\n    }\n\n    const onError = (error: ApolloError) => {\n      // Since we don't get the current result on errors, only the error, we\n      // must mirror the updates that occur in QueryStore.markQueryError here\n      this.updateLastResult({\n        ...this.lastResult,\n        errors: error.graphQLErrors,\n        networkStatus: NetworkStatus.error,\n        loading: false,\n      });\n      iterateObserversSafely(this.observers, 'error', this.lastError = error);\n    };\n\n    queryManager.observeQuery<TData>(queryId, this.options, {\n      next: (result: ApolloQueryResult<TData>) => {\n        if (this.lastError || this.isDifferentFromLastResult(result)) {\n          const previousResult = this.updateLastResult(result);\n          const { query, variables, fetchPolicy } = this.options;\n\n          // Before calling `next` on each observer, we need to first see if\n          // the query is using `@client @export` directives, and update\n          // any variables that might have changed. If `@export` variables have\n          // changed, and the query is calling against both local and remote\n          // data, a refetch is needed to pull in new data, using the\n          // updated `@export` variables.\n          if (queryManager.transform(query).hasClientExports) {\n            queryManager.getLocalState().addExportedVariables(\n              query,\n              variables,\n            ).then((variables: TVariables) => {\n              const previousVariables = this.variables;\n              this.variables = this.options.variables = variables;\n              if (\n                !result.loading &&\n                previousResult &&\n                fetchPolicy !== 'cache-only' &&\n                queryManager.transform(query).serverQuery &&\n                !isEqual(previousVariables, variables)\n              ) {\n                this.refetch();\n              } else {\n                iterateObserversSafely(this.observers, 'next', result);\n              }\n            });\n          } else {\n            iterateObserversSafely(this.observers, 'next', result);\n          }\n        }\n      },\n      error: onError,\n    }).catch(onError);\n  }\n\n  private tearDownQuery() {\n    const { queryManager } = this;\n\n    this.isTornDown = true;\n    queryManager.stopPollingQuery(this.queryId);\n\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n\n    queryManager.removeObservableQuery(this.queryId);\n    queryManager.stopQuery(this.queryId);\n\n    this.observers.clear();\n  }\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nfunction iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n\nfunction assertNotCacheFirstOrOnly<TData, TVariables>(\n  obsQuery: ObservableQuery<TData, TVariables>,\n) {\n  const { fetchPolicy } = obsQuery.options;\n  invariant(\n    fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only',\n    'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.',\n  );\n}\n","import { DocumentNode } from 'graphql';\n\nexport class MutationStore {\n  private store: { [mutationId: string]: MutationStoreValue } = {};\n\n  public getStore(): { [mutationId: string]: MutationStoreValue } {\n    return this.store;\n  }\n\n  public get(mutationId: string): MutationStoreValue {\n    return this.store[mutationId];\n  }\n\n  public initMutation(\n    mutationId: string,\n    mutation: DocumentNode,\n    variables: Object | undefined,\n  ) {\n    this.store[mutationId] = {\n      mutation,\n      variables: variables || {},\n      loading: true,\n      error: null,\n    };\n  }\n\n  public markMutationError(mutationId: string, error: Error) {\n    const mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = error;\n    }\n  }\n\n  public markMutationResult(mutationId: string) {\n    const mutation = this.store[mutationId];\n    if (mutation) {\n      mutation.loading = false;\n      mutation.error = null;\n    }\n  }\n\n  public reset() {\n    this.store = {};\n  }\n}\n\nexport interface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Object;\n  loading: boolean;\n  error: Error | null;\n}\n","import { DocumentNode, GraphQLError, ExecutionResult } from 'graphql';\nimport { isEqual } from 'apollo-utilities';\nimport { invariant } from 'ts-invariant';\nimport { NetworkStatus } from '../core/networkStatus';\nimport { isNonEmptyArray } from '../util/arrays';\n\nexport type QueryStoreValue = {\n  document: DocumentNode;\n  variables: Object;\n  previousVariables?: Object | null;\n  networkStatus: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  metadata: any;\n};\n\nexport class QueryStore {\n  private store: { [queryId: string]: QueryStoreValue } = {};\n\n  public getStore(): { [queryId: string]: QueryStoreValue } {\n    return this.store;\n  }\n\n  public get(queryId: string): QueryStoreValue {\n    return this.store[queryId];\n  }\n\n  public initQuery(query: {\n    queryId: string;\n    document: DocumentNode;\n    storePreviousVariables: boolean;\n    variables: Object;\n    isPoll: boolean;\n    isRefetch: boolean;\n    metadata: any;\n    fetchMoreForQueryId: string | undefined;\n  }) {\n    const previousQuery = this.store[query.queryId];\n\n    // XXX we're throwing an error here to catch bugs where a query gets overwritten by a new one.\n    // we should implement a separate action for refetching so that QUERY_INIT may never overwrite\n    // an existing query (see also: https://github.com/apollostack/apollo-client/issues/732)\n    invariant(\n      !previousQuery ||\n      previousQuery.document === query.document ||\n      isEqual(previousQuery.document, query.document),\n      'Internal Error: may not update existing query string in store',\n    );\n\n    let isSetVariables = false;\n\n    let previousVariables: Object | null = null;\n    if (\n      query.storePreviousVariables &&\n      previousQuery &&\n      previousQuery.networkStatus !== NetworkStatus.loading\n      // if the previous query was still loading, we don't want to remember it at all.\n    ) {\n      if (!isEqual(previousQuery.variables, query.variables)) {\n        isSetVariables = true;\n        previousVariables = previousQuery.variables;\n      }\n    }\n\n    // TODO break this out into a separate function\n    let networkStatus;\n    if (isSetVariables) {\n      networkStatus = NetworkStatus.setVariables;\n    } else if (query.isPoll) {\n      networkStatus = NetworkStatus.poll;\n    } else if (query.isRefetch) {\n      networkStatus = NetworkStatus.refetch;\n      // TODO: can we determine setVariables here if it's a refetch and the variables have changed?\n    } else {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    let graphQLErrors: ReadonlyArray<GraphQLError> = [];\n    if (previousQuery && previousQuery.graphQLErrors) {\n      graphQLErrors = previousQuery.graphQLErrors;\n    }\n\n    // XXX right now if QUERY_INIT is fired twice, like in a refetch situation, we just overwrite\n    // the store. We probably want a refetch action instead, because I suspect that if you refetch\n    // before the initial fetch is done, you'll get an error.\n    this.store[query.queryId] = {\n      document: query.document,\n      variables: query.variables,\n      previousVariables,\n      networkError: null,\n      graphQLErrors: graphQLErrors,\n      networkStatus,\n      metadata: query.metadata,\n    };\n\n    // If the action had a `moreForQueryId` property then we need to set the\n    // network status on that query as well to `fetchMore`.\n    //\n    // We have a complement to this if statement in the query result and query\n    // error action branch, but importantly *not* in the client result branch.\n    // This is because the implementation of `fetchMore` *always* sets\n    // `fetchPolicy` to `network-only` so we would never have a client result.\n    if (\n      typeof query.fetchMoreForQueryId === 'string' &&\n      this.store[query.fetchMoreForQueryId]\n    ) {\n      this.store[query.fetchMoreForQueryId].networkStatus =\n        NetworkStatus.fetchMore;\n    }\n  }\n\n  public markQueryResult(\n    queryId: string,\n    result: ExecutionResult,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = null;\n    this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.store[queryId].previousVariables = null;\n    this.store[queryId].networkStatus = NetworkStatus.ready;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (\n      typeof fetchMoreForQueryId === 'string' &&\n      this.store[fetchMoreForQueryId]\n    ) {\n      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n    }\n  }\n\n  public markQueryError(\n    queryId: string,\n    error: Error,\n    fetchMoreForQueryId: string | undefined,\n  ) {\n    if (!this.store || !this.store[queryId]) return;\n\n    this.store[queryId].networkError = error;\n    this.store[queryId].networkStatus = NetworkStatus.error;\n\n    // If we have a `fetchMoreForQueryId` then we need to update the network\n    // status for that query. See the branch for query initialization for more\n    // explanation about this process.\n    if (typeof fetchMoreForQueryId === 'string') {\n      this.markQueryResultClient(fetchMoreForQueryId, true);\n    }\n  }\n\n  public markQueryResultClient(queryId: string, complete: boolean) {\n    const storeValue = this.store && this.store[queryId];\n    if (storeValue) {\n      storeValue.networkError = null;\n      storeValue.previousVariables = null;\n      if (complete) {\n        storeValue.networkStatus = NetworkStatus.ready;\n      }\n    }\n  }\n\n  public stopQuery(queryId: string) {\n    delete this.store[queryId];\n  }\n\n  public reset(observableQueryIds: string[]) {\n    Object.keys(this.store).forEach(queryId => {\n      if (observableQueryIds.indexOf(queryId) < 0) {\n        this.stopQuery(queryId);\n      } else {\n        // XXX set loading to true so listeners don't trigger unless they want results with partial data\n        this.store[queryId].networkStatus = NetworkStatus.loading;\n      }\n    });\n  }\n}\n","export function capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n","import {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n} from 'graphql';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nimport { ApolloCache } from 'apollo-cache';\nimport {\n  getMainDefinition,\n  buildQueryFromSelectionSet,\n  hasDirectives,\n  removeClientSetsFromDocument,\n  mergeDeep,\n  mergeDeepArray,\n  FragmentMap,\n  argumentsObjectFromField,\n  resultKeyNameFromField,\n  getFragmentDefinitions,\n  createFragmentMap,\n  shouldInclude,\n  isField,\n  isInlineFragment,\n} from 'apollo-utilities';\nimport { FetchResult } from 'apollo-link';\n\nimport { invariant } from 'ts-invariant';\n\nimport ApolloClient from '../ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { capitalizeFirstLetter } from '../util/capitalizeFirstLetter';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n      invariant.warn(\n        'Found @client directives in a query but no ApolloClient resolvers ' +\n        'were specified. This means ApolloClient local resolver handling ' +\n        'has been disabled, and @client directives will be passed through ' +\n        'to your link chain.',\n      );\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return this.resolvers ? removeClientSetsFromDocument(document) : document;\n  }\n\n  public prepareContext(context = {}) {\n    const { cache } = this;\n\n    const newContext = {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey: (obj: { __typename: string; id: string | number }) => {\n        if ((cache as any).config) {\n          return (cache as any).config.dataIdFromObject(obj);\n        } else {\n          invariant(false,\n            'To use context.getCacheKey, you need to use a cache that has ' +\n              'a configurable dataIdFromObject, like apollo-cache-inmemory.',\n          );\n        }\n      },\n    };\n\n    return newContext;\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? capitalizeFirstLetter(definitionOperation)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(resolve(\n            rootValue,\n            argumentsObjectFromField(field, variables),\n            execContext.context,\n            { field, fragmentMap: execContext.fragmentMap },\n          ));\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n","import { Observable, Observer, Subscription } from './Observable';\n\n// Returns a normal Observable that can have any number of subscribers,\n// while ensuring the original Observable gets subscribed to at most once.\nexport function multiplex<T>(inner: Observable<T>): Observable<T> {\n  const observers = new Set<Observer<T>>();\n  let sub: Subscription | null = null;\n  return new Observable<T>(observer => {\n    observers.add(observer);\n    sub = sub || inner.subscribe({\n      next(value) {\n        observers.forEach(obs => obs.next && obs.next(value));\n      },\n      error(error) {\n        observers.forEach(obs => obs.error && obs.error(error));\n      },\n      complete() {\n        observers.forEach(obs => obs.complete && obs.complete());\n      },\n    });\n    return () => {\n      if (observers.delete(observer) && !observers.size && sub) {\n        sub.unsubscribe();\n        sub = null;\n      }\n    };\n  });\n}\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | Promise<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeNextCount = 0;\n    let completed = false;\n\n    const handler: Observer<V> = {\n      next(value) {\n        ++activeNextCount;\n        new Promise(resolve => {\n          resolve(mapFn(value));\n        }).then(\n          result => {\n            --activeNextCount;\n            next && next.call(observer, result);\n            completed && handler.complete!();\n          },\n          e => {\n            --activeNextCount;\n            error && error.call(observer, e);\n          },\n        );\n      },\n      error(e) {\n        error && error.call(observer, e);\n      },\n      complete() {\n        completed = true;\n        if (!activeNextCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n","import { execute, ApolloLink, FetchResult } from 'apollo-link';\nimport { DocumentNode } from 'graphql';\nimport { Cache } from 'apollo-cache';\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasDirectives,\n  graphQLResultHasError,\n  hasClientExports,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n} from 'apollo-utilities';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { isApolloError, ApolloError } from '../errors/ApolloError';\nimport { Observer, Subscription, Observable } from '../util/Observable';\nimport { QueryWithUpdater, DataStore } from '../data/store';\nimport { MutationStore } from '../data/mutations';\nimport { QueryStore, QueryStoreValue } from '../data/queries';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  QueryListener,\n  ApolloQueryResult,\n  FetchType,\n  OperationVariables,\n} from './types';\nimport { LocalState } from './LocalState';\nimport { asyncMap, multiplex } from '../util/observables';\nimport { isNonEmptyArray } from '../util/arrays';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport interface QueryInfo {\n  listeners: Set<QueryListener>;\n  invalidated: boolean;\n  newData: Cache.DiffResult<any> | null;\n  document: DocumentNode | null;\n  lastRequestId: number;\n  // A map going from queryId to an observer for a query issued by watchQuery. We use\n  // these to keep track of queries that are inflight and error on the observers associated\n  // with them in case of some destabalizing action (e.g. reset of the Apollo store).\n  observableQuery: ObservableQuery<any> | null;\n  subscriptions: Set<Subscription>;\n  cancel?: () => void;\n}\n\nexport class QueryManager<TStore> {\n  public link: ApolloLink;\n  public mutationStore: MutationStore = new MutationStore();\n  public queryStore: QueryStore = new QueryStore();\n  public dataStore: DataStore<TStore>;\n  public readonly assumeImmutableResults: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast: () => void;\n\n  private ssrMode: boolean;\n\n  // let's not start at zero to avoid pain with bad checks\n  private idCounter = 1;\n\n  // XXX merge with ObservableQuery but that needs to be expanded to support mutations and\n  // subscriptions as well\n  private queries: Map<string, QueryInfo> = new Map();\n\n  // A map of Promise reject functions for fetchQuery promises that have not\n  // yet been resolved, used to keep track of in-flight queries so that we can\n  // reject them in case a destabilizing event occurs (e.g. Apollo store reset).\n  // The key is in the format of `query:${queryId}` or `fetchRequest:${queryId}`,\n  // depending on where the promise's rejection function was created from.\n  private fetchQueryRejectFns = new Map<string, Function>();\n\n  constructor({\n    link,\n    queryDeduplication = false,\n    store,\n    onBroadcast = () => undefined,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    store: DataStore<TStore>;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.dataStore = store;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache: store.getCache() });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(\n        new InvariantError('QueryManager stopped while query was in flight'),\n      );\n    });\n  }\n\n  public async mutate<T>({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries: updateQueriesByName,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    errorPolicy = 'none',\n    fetchPolicy,\n    context = {},\n  }: MutationOptions): Promise<FetchResult<T>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      !fetchPolicy || fetchPolicy === 'no-cache',\n      \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\"\n    );\n\n    const mutationId = this.generateQueryId();\n    mutation = this.transform(mutation).document;\n\n    this.setQuery(mutationId, () => ({ document: mutation }));\n\n    variables = this.getVariables(mutation, variables);\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context);\n    }\n\n    // Create a map of update queries by id to the query instead of by name.\n    const generateUpdateQueriesInfo: () => {\n      [queryId: string]: QueryWithUpdater;\n    } = () => {\n      const ret: { [queryId: string]: QueryWithUpdater } = {};\n\n      if (updateQueriesByName) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          if (observableQuery) {\n            const { queryName } = observableQuery;\n            if (\n              queryName &&\n              hasOwnProperty.call(updateQueriesByName, queryName)\n            ) {\n              ret[queryId] = {\n                updater: updateQueriesByName[queryName],\n                query: this.queryStore.get(queryId),\n              };\n            }\n          }\n        });\n      }\n\n      return ret;\n    };\n\n    this.mutationStore.initMutation(\n      mutationId,\n      mutation,\n      variables,\n    );\n\n    this.dataStore.markMutationInit({\n      mutationId,\n      document: mutation,\n      variables,\n      updateQueries: generateUpdateQueriesInfo(),\n      update: updateWithProxyFn,\n      optimisticResponse,\n    });\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      let storeResult: FetchResult<T> | null;\n      let error: ApolloError;\n\n      self.getObservableFromLink(\n        mutation,\n        {\n          ...context,\n          optimisticResponse,\n        },\n        variables,\n        false,\n      ).subscribe({\n        next(result: FetchResult<T>) {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            error = new ApolloError({\n              graphQLErrors: result.errors,\n            });\n            return;\n          }\n\n          self.mutationStore.markMutationResult(mutationId);\n\n          if (fetchPolicy !== 'no-cache') {\n            self.dataStore.markMutationResult({\n              mutationId,\n              result,\n              document: mutation,\n              variables,\n              updateQueries: generateUpdateQueriesInfo(),\n              update: updateWithProxyFn,\n            });\n          }\n\n          storeResult = result;\n        },\n\n        error(err: Error) {\n          self.mutationStore.markMutationError(mutationId, err);\n          self.dataStore.markMutationComplete({\n            mutationId,\n            optimisticResponse,\n          });\n          self.broadcastQueries();\n          self.setQuery(mutationId, () => ({ document: null }));\n          reject(\n            new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n\n        complete() {\n          if (error) {\n            self.mutationStore.markMutationError(mutationId, error);\n          }\n\n          self.dataStore.markMutationComplete({\n            mutationId,\n            optimisticResponse,\n          });\n\n          self.broadcastQueries();\n\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          // allow for conditional refetches\n          // XXX do we want to make this the only API one day?\n          if (typeof refetchQueries === 'function') {\n            refetchQueries = refetchQueries(storeResult!);\n          }\n\n          const refetchQueryPromises: Promise<\n            ApolloQueryResult<any>[] | ApolloQueryResult<{}>\n          >[] = [];\n\n          if (isNonEmptyArray(refetchQueries)) {\n            refetchQueries.forEach(refetchQuery => {\n              if (typeof refetchQuery === 'string') {\n                self.queries.forEach(({ observableQuery }) => {\n                  if (\n                    observableQuery &&\n                    observableQuery.queryName === refetchQuery\n                  ) {\n                    refetchQueryPromises.push(observableQuery.refetch());\n                  }\n                });\n              } else {\n                const queryOptions: QueryOptions = {\n                  query: refetchQuery.query,\n                  variables: refetchQuery.variables,\n                  fetchPolicy: 'network-only',\n                };\n\n                if (refetchQuery.context) {\n                  queryOptions.context = refetchQuery.context;\n                }\n\n                refetchQueryPromises.push(self.query(queryOptions));\n              }\n            });\n          }\n\n          Promise.all(\n            awaitRefetchQueries ? refetchQueryPromises : [],\n          ).then(() => {\n            self.setQuery(mutationId, () => ({ document: null }));\n\n            if (\n              errorPolicy === 'ignore' &&\n              storeResult &&\n              graphQLResultHasError(storeResult)\n            ) {\n              delete storeResult.errors;\n            }\n\n            resolve(storeResult!);\n          });\n        },\n      });\n    });\n  }\n\n  public async fetchQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    fetchType?: FetchType,\n    // This allows us to track if this is a query spawned by a `fetchMore`\n    // call for another query. We need this data to compute the `fetchMore`\n    // network status for the query this is fetching for.\n    fetchMoreForQueryId?: string,\n  ): Promise<FetchResult<T>> {\n    const {\n      metadata = null,\n      fetchPolicy = 'cache-first', // cache-first is the default fetch policy.\n      context = {},\n    } = options;\n\n    const query = this.transform(options.query).document;\n\n    let variables = this.getVariables(query, options.variables);\n\n    if (this.transform(query).hasClientExports) {\n      variables = await this.localState.addExportedVariables(query, variables, context);\n    }\n\n    options = { ...options, variables };\n\n    let storeResult: any;\n    const isNetworkOnly =\n      fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    let needToFetch = isNetworkOnly;\n\n    // Unless we are completely skipping the cache, we want to diff the query\n    // against the cache before we fetch it from the network interface.\n    if (!isNetworkOnly) {\n      const { complete, result } = this.dataStore.getCache().diff({\n        query,\n        variables,\n        returnPartialData: true,\n        optimistic: false,\n      });\n\n      // If we're in here, only fetch if we have missing fields\n      needToFetch = !complete || fetchPolicy === 'cache-and-network';\n      storeResult = result;\n    }\n\n    let shouldFetch =\n      needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n\n    // we need to check to see if this is an operation that uses the @live directive\n    if (hasDirectives(['live'], query)) shouldFetch = true;\n\n    const requestId = this.idCounter++;\n\n    // set up a watcher to listen to cache updates\n    const cancel = fetchPolicy !== 'no-cache'\n      ? this.updateQueryWatch(queryId, query, options)\n      : undefined;\n\n    // Initialize query in store with unique requestId\n    this.setQuery(queryId, () => ({\n      document: query,\n      lastRequestId: requestId,\n      invalidated: true,\n      cancel,\n    }));\n\n    this.invalidate(fetchMoreForQueryId);\n\n    this.queryStore.initQuery({\n      queryId,\n      document: query,\n      storePreviousVariables: shouldFetch,\n      variables,\n      isPoll: fetchType === FetchType.poll,\n      isRefetch: fetchType === FetchType.refetch,\n      metadata,\n      fetchMoreForQueryId,\n    });\n\n    this.broadcastQueries();\n\n    if (shouldFetch) {\n      const networkResult = this.fetchRequest<T>({\n        requestId,\n        queryId,\n        document: query,\n        options,\n        fetchMoreForQueryId,\n      }).catch(error => {\n        // This is for the benefit of `refetch` promises, which currently don't get their errors\n        // through the store like watchQuery observers do\n        if (isApolloError(error)) {\n          throw error;\n        } else {\n          if (requestId >= this.getQuery(queryId).lastRequestId) {\n            this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n            this.invalidate(queryId);\n            this.invalidate(fetchMoreForQueryId);\n            this.broadcastQueries();\n          }\n          throw new ApolloError({ networkError: error });\n        }\n      });\n\n      // we don't return the promise for cache-and-network since it is already\n      // returned below from the cache\n      if (fetchPolicy !== 'cache-and-network') {\n        return networkResult;\n      }\n\n      // however we need to catch the error so it isn't unhandled in case of\n      // network error\n      networkResult.catch(() => {});\n    }\n\n    // If there is no part of the query we need to fetch from the server (or,\n    // fetchPolicy is cache-only), we just write the store result as the final result.\n    this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n    this.invalidate(queryId);\n    this.invalidate(fetchMoreForQueryId);\n\n    if (this.transform(query).hasForcedResolvers) {\n      return this.localState.runResolvers({\n        document: query,\n        remoteResult: { data: storeResult },\n        context,\n        variables,\n        onlyRunForcedResolvers: true,\n      }).then((result: FetchResult<T>) => {\n        this.markQueryResult(\n          queryId,\n          result,\n          options,\n          fetchMoreForQueryId,\n        );\n        this.broadcastQueries();\n        return result;\n      });\n    }\n\n    this.broadcastQueries();\n\n    // If we have no query to send to the server, we should return the result\n    // found within the store.\n    return { data: storeResult };\n  }\n\n  private markQueryResult<TData>(\n    queryId: string,\n    result: FetchResult<TData>,\n    {\n      fetchPolicy,\n      variables,\n      errorPolicy,\n    }: WatchQueryOptions,\n    fetchMoreForQueryId?: string,\n  ) {\n    if (fetchPolicy === 'no-cache') {\n      this.setQuery(queryId, () => ({\n        newData: { result: result.data, complete: true },\n      }));\n    } else {\n      this.dataStore.markQueryResult(\n        result,\n        this.getQuery(queryId).document!,\n        variables,\n        fetchMoreForQueryId,\n        errorPolicy === 'ignore' || errorPolicy === 'all',\n      );\n    }\n  }\n\n  // Returns a query listener that will update the given observer based on the\n  // results (or lack thereof) for a particular query.\n  public queryListenerForObserver<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    observer: Observer<ApolloQueryResult<T>>,\n  ): QueryListener {\n    function invoke(method: 'next' | 'error', argument: any) {\n      if (observer[method]) {\n        try {\n          observer[method]!(argument);\n        } catch (e) {\n          invariant.error(e);\n        }\n      } else if (method === 'error') {\n        invariant.error(argument);\n      }\n    }\n\n    return (\n      queryStoreValue: QueryStoreValue,\n      newData?: Cache.DiffResult<T>,\n    ) => {\n      // we're going to take a look at the data, so the query is no longer invalidated\n      this.invalidate(queryId, false);\n\n      // The query store value can be undefined in the event of a store\n      // reset.\n      if (!queryStoreValue) return;\n\n      const { observableQuery, document } = this.getQuery(queryId);\n\n      const fetchPolicy = observableQuery\n        ? observableQuery.options.fetchPolicy\n        : options.fetchPolicy;\n\n      // don't watch the store for queries on standby\n      if (fetchPolicy === 'standby') return;\n\n      const loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n      const lastResult = observableQuery && observableQuery.getLastResult();\n\n      const networkStatusChanged = !!(\n        lastResult &&\n        lastResult.networkStatus !== queryStoreValue.networkStatus\n      );\n\n      const shouldNotifyIfLoading =\n        options.returnPartialData ||\n        (!newData && queryStoreValue.previousVariables) ||\n        (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n        fetchPolicy === 'cache-only' ||\n        fetchPolicy === 'cache-and-network';\n\n      if (loading && !shouldNotifyIfLoading) {\n        return;\n      }\n\n      const hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n\n      const errorPolicy: ErrorPolicy = observableQuery\n        && observableQuery.options.errorPolicy\n        || options.errorPolicy\n        || 'none';\n\n      // If we have either a GraphQL error or a network error, we create\n      // an error and tell the observer about it.\n      if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n        return invoke('error', new ApolloError({\n          graphQLErrors: queryStoreValue.graphQLErrors,\n          networkError: queryStoreValue.networkError,\n        }));\n      }\n\n      try {\n        let data: any;\n        let isMissing: boolean;\n\n        if (newData) {\n          // As long as we're using the cache, clear out the latest\n          // `newData`, since it will now become the current data. We need\n          // to keep the `newData` stored with the query when using\n          // `no-cache` since `getCurrentQueryResult` attemps to pull from\n          // `newData` first, following by trying the cache (which won't\n          // find a hit for `no-cache`).\n          if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n            this.setQuery(queryId, () => ({ newData: null }));\n          }\n\n          data = newData.result;\n          isMissing = !newData.complete;\n        } else {\n          const lastError = observableQuery && observableQuery.getLastError();\n          const errorStatusChanged =\n            errorPolicy !== 'none' &&\n            (lastError && lastError.graphQLErrors) !==\n              queryStoreValue.graphQLErrors;\n\n          if (lastResult && lastResult.data && !errorStatusChanged) {\n            data = lastResult.data;\n            isMissing = false;\n          } else {\n            const diffResult = this.dataStore.getCache().diff({\n              query: document as DocumentNode,\n              variables:\n                queryStoreValue.previousVariables ||\n                queryStoreValue.variables,\n              returnPartialData: true,\n              optimistic: true,\n            });\n\n            data = diffResult.result;\n            isMissing = !diffResult.complete;\n          }\n        }\n\n        // If there is some data missing and the user has told us that they\n        // do not tolerate partial data then we want to return the previous\n        // result and mark it as stale.\n        const stale = isMissing && !(\n          options.returnPartialData ||\n          fetchPolicy === 'cache-only'\n        );\n\n        const resultFromStore: ApolloQueryResult<T> = {\n          data: stale ? lastResult && lastResult.data : data,\n          loading,\n          networkStatus: queryStoreValue.networkStatus,\n          stale,\n        };\n\n        // if the query wants updates on errors we need to add it to the result\n        if (errorPolicy === 'all' && hasGraphQLErrors) {\n          resultFromStore.errors = queryStoreValue.graphQLErrors;\n        }\n\n        invoke('next', resultFromStore);\n\n      } catch (networkError) {\n        invoke('error', new ApolloError({ networkError }));\n      }\n    };\n  }\n\n  private transformCache = new (canUseWeakMap ? WeakMap : Map)<\n    DocumentNode,\n    Readonly<{\n      document: Readonly<DocumentNode>;\n      hasClientExports: boolean;\n      hasForcedResolvers: boolean;\n      clientQuery: Readonly<DocumentNode> | null;\n      serverQuery: Readonly<DocumentNode> | null;\n      defaultVars: Readonly<OperationVariables>;\n    }>\n  >();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const cache = this.dataStore.getCache();\n      const transformed = cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = this.localState.serverQuery(forLink);\n\n      const cacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables(\n    document: DocumentNode,\n    variables?: OperationVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  // The shouldSubscribe option is a temporary fix that tells us whether watchQuery was called\n  // directly (i.e. through ApolloClient) or through the query method within QueryManager.\n  // Currently, the query method uses watchQuery in order to handle non-network errors correctly\n  // but we don't want to keep track observables issued for the query method since those aren't\n  // supposed to be refetched in the event of a store reset. Once we unify error handling for\n  // network errors and non-network errors, the shouldSubscribe option will go away.\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions,\n    shouldSubscribe = true,\n  ): ObservableQuery<T, TVariables> {\n    invariant(\n      options.fetchPolicy !== 'standby',\n      'client.watchQuery cannot be called with fetchPolicy set to \"standby\"',\n    );\n\n    // assign variable default values if supplied\n    options.variables = this.getVariables(options.query, options.variables);\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    let transformedOptions = { ...options } as WatchQueryOptions<TVariables>;\n\n    return new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      options: transformedOptions,\n      shouldSubscribe: shouldSubscribe,\n    });\n  }\n\n  public query<T>(options: QueryOptions): Promise<ApolloQueryResult<T>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      const watchedQuery = this.watchQuery<T>(options, false);\n      this.fetchQueryRejectFns.set(`query:${watchedQuery.queryId}`, reject);\n      watchedQuery\n        .result()\n        .then(resolve, reject)\n        // Since neither resolve nor reject throw or return a value, this .then\n        // handler is guaranteed to execute. Note that it doesn't really matter\n        // when we remove the reject function from this.fetchQueryRejectFns,\n        // since resolve and reject are mutually idempotent. In fact, it would\n        // not be incorrect to let reject functions accumulate over time; it's\n        // just a waste of memory.\n        .then(() =>\n          this.fetchQueryRejectFns.delete(`query:${watchedQuery.queryId}`),\n        );\n    });\n  }\n\n  public generateQueryId() {\n    return String(this.idCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    this.stopPollingQuery(queryId);\n    this.queryStore.stopQuery(queryId);\n    this.invalidate(queryId);\n  }\n\n  public addQueryListener(queryId: string, listener: QueryListener) {\n    this.setQuery(queryId, ({ listeners }) => {\n      listeners.add(listener);\n      return { invalidated: false };\n    });\n  }\n\n  public updateQueryWatch(\n    queryId: string,\n    document: DocumentNode,\n    options: WatchQueryOptions,\n  ) {\n    const { cancel } = this.getQuery(queryId);\n    if (cancel) cancel();\n    const previousResult = () => {\n      let previousResult = null;\n      const { observableQuery } = this.getQuery(queryId);\n      if (observableQuery) {\n        const lastResult = observableQuery.getLastResult();\n        if (lastResult) {\n          previousResult = lastResult.data;\n        }\n      }\n\n      return previousResult;\n    };\n    return this.dataStore.getCache().watch({\n      query: document as DocumentNode,\n      variables: options.variables,\n      optimistic: true,\n      previousResult,\n      callback: newData => {\n        this.setQuery(queryId, () => ({ invalidated: true, newData }));\n      },\n    });\n  }\n\n  // Adds an ObservableQuery to this.observableQueries and to this.observableQueriesByName.\n  public addObservableQuery<T>(\n    queryId: string,\n    observableQuery: ObservableQuery<T>,\n  ) {\n    this.setQuery(queryId, () => ({ observableQuery }));\n  }\n\n  public removeObservableQuery(queryId: string) {\n    const { cancel } = this.getQuery(queryId);\n    this.setQuery(queryId, () => ({ observableQuery: null }));\n    if (cancel) cancel();\n  }\n\n  public clearStore(): Promise<void> {\n    // Before we have sent the reset action to the store,\n    // we can no longer rely on the results returned by in-flight\n    // requests since these may depend on values that previously existed\n    // in the data portion of the store. So, we cancel the promises and observers\n    // that we have issued so far and not yet resolved (in the case of\n    // queries).\n    this.fetchQueryRejectFns.forEach(reject => {\n      reject(new InvariantError(\n        'Store reset while query was in flight (not completed in link chain)',\n      ));\n    });\n\n    const resetIds: string[] = [];\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery) resetIds.push(queryId);\n    });\n\n    this.queryStore.reset(resetIds);\n    this.mutationStore.reset();\n\n    // begin removing data from the store\n    return this.dataStore.reset();\n  }\n\n  public resetStore(): Promise<ApolloQueryResult<any>[]> {\n    // Similarly, we have to have to refetch each of the queries currently being\n    // observed. We refetch instead of error'ing on these since the assumption is that\n    // resetting the store doesn't eliminate the need for the queries currently being\n    // watched. If there is an existing query in flight when the store is reset,\n    // the promise for it will be rejected and its results will not be written to the\n    // store.\n    return this.clearStore().then(() => {\n      return this.reFetchObservableQueries();\n    });\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.queries.forEach(({ observableQuery }, queryId) => {\n      if (observableQuery) {\n        const fetchPolicy = observableQuery.options.fetchPolicy;\n\n        observableQuery.resetLastResults();\n        if (\n          fetchPolicy !== 'cache-only' &&\n          (includeStandby || fetchPolicy !== 'standby')\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        this.setQuery(queryId, () => ({ newData: null }));\n        this.invalidate(queryId);\n      }\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public observeQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    observer: Observer<ApolloQueryResult<T>>,\n  ) {\n    this.addQueryListener(\n      queryId,\n      this.queryListenerForObserver(queryId, options, observer),\n    );\n    return this.fetchQuery<T>(queryId, options);\n  }\n\n  public startQuery<T>(\n    queryId: string,\n    options: WatchQueryOptions,\n    listener: QueryListener,\n  ) {\n    invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n\n    this.addQueryListener(queryId, listener);\n\n    this.fetchQuery<T>(queryId, options)\n      // `fetchQuery` returns a Promise. In case of a failure it should be caucht or else the\n      // console will show an `Uncaught (in promise)` message. Ignore the error for now.\n      .catch(() => undefined);\n\n    return queryId;\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    variables,\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        {},\n        variables,\n        false,\n      ).map(result => {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          this.dataStore.markSubscriptionResult(\n            result,\n            query,\n            variables,\n          );\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: Subscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchQueryRejectFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchQueryRejectFns.delete(`query:${queryId}`);\n    this.fetchQueryRejectFns.delete(`fetchRequest:${queryId}`);\n    this.getQuery(queryId).subscriptions.forEach(x => x.unsubscribe());\n    this.queries.delete(queryId);\n  }\n\n  public getCurrentQueryResult<T>(\n    observableQuery: ObservableQuery<T>,\n    optimistic: boolean = true,\n  ): {\n    data: T | undefined;\n    partial: boolean;\n  } {\n    const { variables, query, fetchPolicy, returnPartialData } = observableQuery.options;\n    const lastResult = observableQuery.getLastResult();\n    const { newData } = this.getQuery(observableQuery.queryId);\n\n    if (newData && newData.complete) {\n      return { data: newData.result, partial: false };\n    }\n\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return { data: undefined, partial: false };\n    }\n\n    const { result, complete } = this.dataStore.getCache().diff<T>({\n      query,\n      variables,\n      previousResult: lastResult ? lastResult.data : undefined,\n      returnPartialData: true,\n      optimistic,\n    });\n\n    return {\n      data: (complete || returnPartialData) ? result : void 0,\n      partial: !complete,\n    };\n  }\n\n  public getQueryWithPreviousResult<TData, TVariables = OperationVariables>(\n    queryIdOrObservable: string | ObservableQuery<TData, TVariables>,\n  ): {\n    previousResult: any;\n    variables: TVariables | undefined;\n    document: DocumentNode;\n  } {\n    let observableQuery: ObservableQuery<TData, any>;\n    if (typeof queryIdOrObservable === 'string') {\n      const { observableQuery: foundObserveableQuery } = this.getQuery(\n        queryIdOrObservable,\n      );\n      invariant(\n        foundObserveableQuery,\n        `ObservableQuery with this id doesn't exist: ${queryIdOrObservable}`\n      );\n      observableQuery = foundObserveableQuery!;\n    } else {\n      observableQuery = queryIdOrObservable;\n    }\n\n    const { variables, query } = observableQuery.options;\n    return {\n      previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n      variables,\n      document: query,\n    };\n  }\n\n  public broadcastQueries() {\n    this.onBroadcast();\n    this.queries.forEach((info, id) => {\n      if (info.invalidated) {\n        info.listeners.forEach(listener => {\n          // it's possible for the listener to be undefined if the query is being stopped\n          // See here for more detail: https://github.com/apollostack/apollo-client/issues/231\n          if (listener) {\n            listener(this.queryStore.get(id), info.newData);\n          }\n        });\n      }\n    });\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean = this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = JSON.stringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          byVariables.set(\n            varJson,\n            observable = multiplex(\n              execute(link, operation) as Observable<FetchResult<T>>\n            )\n          );\n\n          const cleanup = () => {\n            byVariables.delete(varJson);\n            if (!byVariables.size) inFlightLinkObservables.delete(serverQuery);\n            cleanupSub.unsubscribe();\n          };\n\n          const cleanupSub = observable.subscribe({\n            next: cleanup,\n            error: cleanup,\n            complete: cleanup,\n          });\n        }\n\n      } else {\n        observable = multiplex(execute(link, operation) as Observable<FetchResult<T>>);\n      }\n    } else {\n      observable = Observable.of({ data: {} } as FetchResult<T>);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  // Takes a request id, query id, a query document and information associated with the query\n  // and send it to the network interface. Returns\n  // a promise for the result associated with that request.\n  private fetchRequest<T>({\n    requestId,\n    queryId,\n    document,\n    options,\n    fetchMoreForQueryId,\n  }: {\n    requestId: number;\n    queryId: string;\n    document: DocumentNode;\n    options: WatchQueryOptions;\n    fetchMoreForQueryId?: string;\n  }): Promise<FetchResult<T>> {\n    const { variables, errorPolicy = 'none', fetchPolicy } = options;\n    let resultFromStore: any;\n    let errorsFromStore: any;\n\n    return new Promise<ApolloQueryResult<T>>((resolve, reject) => {\n      const observable = this.getObservableFromLink(\n        document,\n        options.context,\n        variables,\n      );\n\n      const fqrfId = `fetchRequest:${queryId}`;\n      this.fetchQueryRejectFns.set(fqrfId, reject);\n\n      const cleanup = () => {\n        this.fetchQueryRejectFns.delete(fqrfId);\n        this.setQuery(queryId, ({ subscriptions }) => {\n          subscriptions.delete(subscription);\n        });\n      };\n\n      const subscription = observable.map((result: FetchResult<T>) => {\n        if (requestId >= this.getQuery(queryId).lastRequestId) {\n          this.markQueryResult(\n            queryId,\n            result,\n            options,\n            fetchMoreForQueryId,\n          );\n\n          this.queryStore.markQueryResult(\n            queryId,\n            result,\n            fetchMoreForQueryId,\n          );\n\n          this.invalidate(queryId);\n          this.invalidate(fetchMoreForQueryId);\n\n          this.broadcastQueries();\n        }\n\n        if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n          return reject(new ApolloError({\n            graphQLErrors: result.errors,\n          }));\n        }\n\n        if (errorPolicy === 'all') {\n          errorsFromStore = result.errors;\n        }\n\n        if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n          // We don't write fetchMore results to the store because this would overwrite\n          // the original result in case an @connection directive is used.\n          resultFromStore = result.data;\n        } else {\n          // ensure result is combined with data already in store\n          const { result, complete } = this.dataStore.getCache().diff<T>({\n            variables,\n            query: document,\n            optimistic: false,\n            returnPartialData: true,\n          });\n\n          if (complete || options.returnPartialData) {\n            resultFromStore = result;\n          }\n        }\n      }).subscribe({\n        error(error: ApolloError) {\n          cleanup();\n          reject(error);\n        },\n\n        complete() {\n          cleanup();\n          resolve({\n            data: resultFromStore,\n            errors: errorsFromStore,\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            stale: false,\n          });\n        },\n      });\n\n      this.setQuery(queryId, ({ subscriptions }) => {\n        subscriptions.add(subscription);\n      });\n    });\n  }\n\n  private getQuery(queryId: string) {\n    return (\n      this.queries.get(queryId) || {\n        listeners: new Set<QueryListener>(),\n        invalidated: false,\n        document: null,\n        newData: null,\n        lastRequestId: 1,\n        observableQuery: null,\n        subscriptions: new Set<Subscription>(),\n      }\n    );\n  }\n\n  private setQuery<T extends keyof QueryInfo>(\n    queryId: string,\n    updater: (prev: QueryInfo) => Pick<QueryInfo, T> | void,\n  ) {\n    const prev = this.getQuery(queryId);\n    const newInfo = { ...prev, ...updater(prev) };\n    this.queries.set(queryId, newInfo);\n  }\n\n  private invalidate(\n    queryId: string | undefined,\n    invalidated = true,\n  ) {\n    if (queryId) {\n      this.setQuery(queryId, () => ({ invalidated }));\n    }\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n\n  public checkInFlight(queryId: string) {\n    const query = this.queryStore.get(queryId);\n\n    return (\n      query &&\n      query.networkStatus !== NetworkStatus.ready &&\n      query.networkStatus !== NetworkStatus.error\n    );\n  }\n\n  // Map from client ID to { interval, options }.\n  private pollingInfoByQueryId = new Map<string, {\n    interval: number;\n    timeout: NodeJS.Timeout;\n    options: WatchQueryOptions;\n  }>();\n\n  public startPollingQuery(\n    options: WatchQueryOptions,\n    queryId: string,\n    listener?: QueryListener,\n  ): string {\n    const { pollInterval } = options;\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    // Do not poll in SSR mode\n    if (!this.ssrMode) {\n      let info = this.pollingInfoByQueryId.get(queryId)!;\n      if (!info) {\n        this.pollingInfoByQueryId.set(queryId, (info = {} as any));\n      }\n\n      info.interval = pollInterval!;\n      info.options = {\n        ...options,\n        fetchPolicy: 'network-only',\n      };\n\n      const maybeFetch = () => {\n        const info = this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          if (this.checkInFlight(queryId)) {\n            poll();\n          } else {\n            this.fetchQuery(queryId, info.options, FetchType.poll).then(\n              poll,\n              poll,\n            );\n          }\n        }\n      };\n\n      const poll = () => {\n        const info = this.pollingInfoByQueryId.get(queryId);\n        if (info) {\n          clearTimeout(info.timeout);\n          info.timeout = setTimeout(maybeFetch, info.interval);\n        }\n      };\n\n      if (listener) {\n        this.addQueryListener(queryId, listener);\n      }\n\n      poll();\n    }\n\n    return queryId;\n  }\n\n  public stopPollingQuery(queryId: string) {\n    this.pollingInfoByQueryId.delete(queryId);\n  }\n}\n","import { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, Cache, DataProxy } from 'apollo-cache';\n\nimport { QueryStoreValue } from '../data/queries';\nimport {\n  getOperationName,\n  tryFunctionOrLogError,\n  graphQLResultHasError,\n} from 'apollo-utilities';\nimport { MutationQueryReducer } from '../core/types';\n\nexport type QueryWithUpdater = {\n  updater: MutationQueryReducer<Object>;\n  query: QueryStoreValue;\n};\n\nexport interface DataWrite {\n  rootId: string;\n  result: any;\n  document: DocumentNode;\n  operationName: string | null;\n  variables: Object;\n}\n\nexport class DataStore<TSerialized> {\n  private cache: ApolloCache<TSerialized>;\n\n  constructor(initialCache: ApolloCache<TSerialized>) {\n    this.cache = initialCache;\n  }\n\n  public getCache(): ApolloCache<TSerialized> {\n    return this.cache;\n  }\n\n  public markQueryResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n    fetchMoreForQueryId: string | undefined,\n    ignoreErrors: boolean = false,\n  ) {\n    let writeWithErrors = !graphQLResultHasError(result);\n    if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n      writeWithErrors = true;\n    }\n    if (!fetchMoreForQueryId && writeWithErrors) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_QUERY',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markSubscriptionResult(\n    result: ExecutionResult,\n    document: DocumentNode,\n    variables: any,\n  ) {\n    // the subscription interface should handle not sending us results we no longer subscribe to.\n    // XXX I don't think we ever send in an object with errors, but we might in the future...\n    if (!graphQLResultHasError(result)) {\n      this.cache.write({\n        result: result.data,\n        dataId: 'ROOT_SUBSCRIPTION',\n        query: document,\n        variables: variables,\n      });\n    }\n  }\n\n  public markMutationInit(mutation: {\n    mutationId: string;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n    optimisticResponse: Object | Function | undefined;\n  }) {\n    if (mutation.optimisticResponse) {\n      let optimistic: Object;\n      if (typeof mutation.optimisticResponse === 'function') {\n        optimistic = mutation.optimisticResponse(mutation.variables);\n      } else {\n        optimistic = mutation.optimisticResponse;\n      }\n\n      this.cache.recordOptimisticTransaction(c => {\n        const orig = this.cache;\n        this.cache = c;\n\n        try {\n          this.markMutationResult({\n            mutationId: mutation.mutationId,\n            result: { data: optimistic },\n            document: mutation.document,\n            variables: mutation.variables,\n            updateQueries: mutation.updateQueries,\n            update: mutation.update,\n          });\n        } finally {\n          this.cache = orig;\n        }\n      }, mutation.mutationId);\n    }\n  }\n\n  public markMutationResult(mutation: {\n    mutationId: string;\n    result: ExecutionResult;\n    document: DocumentNode;\n    variables: any;\n    updateQueries: { [queryId: string]: QueryWithUpdater };\n    update: ((proxy: DataProxy, mutationResult: Object) => void) | undefined;\n  }) {\n    // Incorporate the result from this mutation into the store\n    if (!graphQLResultHasError(mutation.result)) {\n      const cacheWrites: Cache.WriteOptions[] = [{\n        result: mutation.result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      }];\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        Object.keys(updateQueries).forEach(id => {\n          const { query, updater } = updateQueries[id];\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = this.cache.diff({\n            query: query.document,\n            variables: query.variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = tryFunctionOrLogError(() =>\n              updater(currentQueryResult, {\n                mutationResult: mutation.result,\n                queryName: getOperationName(query.document) || undefined,\n                queryVariables: query.variables,\n              }),\n            );\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: query.document,\n                variables: query.variables,\n              });\n            }\n          }\n        });\n      }\n\n      this.cache.performTransaction(c => {\n        cacheWrites.forEach(write => c.write(write));\n\n        // If the mutation has some writes associated with it then we need to\n        // apply those writes to the store by running this reducer again with a\n        // write action.\n        const { update } = mutation;\n        if (update) {\n          tryFunctionOrLogError(() => update(c, mutation.result));\n        }\n      });\n    }\n  }\n\n  public markMutationComplete({\n    mutationId,\n    optimisticResponse,\n  }: {\n    mutationId: string;\n    optimisticResponse?: any;\n  }) {\n    if (optimisticResponse) {\n      this.cache.removeOptimistic(mutationId);\n    }\n  }\n\n  public markUpdateQueryResult(\n    document: DocumentNode,\n    variables: any,\n    newResult: any,\n  ) {\n    this.cache.write({\n      result: newResult,\n      dataId: 'ROOT_QUERY',\n      variables,\n      query: document,\n    });\n  }\n\n  public reset(): Promise<void> {\n    return this.cache.reset();\n  }\n}\n","export const version = \"2.6.10\"","import {\n  ApolloLink,\n  FetchResult,\n  GraphQLRequest,\n  execute,\n} from 'apollo-link';\nimport { ExecutionResult, DocumentNode } from 'graphql';\nimport { ApolloCache, DataProxy } from 'apollo-cache';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { QueryManager } from './core/QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  Resolvers,\n} from './core/types';\nimport { ObservableQuery } from './core/ObservableQuery';\nimport { LocalState, FragmentMatcher } from './core/LocalState';\nimport { Observable } from './util/Observable';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  WatchQueryFetchPolicy,\n} from './core/watchQueryOptions';\n\nimport { DataStore } from './data/store';\n\nimport { version } from './version';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions>;\n  query?: Partial<QueryOptions>;\n  mutate?: Partial<MutationOptions>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport default class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public store: DataStore<TCacheShape>;\n  public cache: ApolloCache<TCacheShape>;\n  public readonly queryManager: QueryManager<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions = {};\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations. Passing\n   *                               `{ freezeResults: true }` to the `InMemoryCache` constructor\n   *                               can help enforce this immutability.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    // If a link hasn't been defined, but local state resolvers have been set,\n    // setup a default empty link.\n    if (!link && resolvers) {\n      link = ApolloLink.empty();\n    }\n\n    if (!link || !cache) {\n      throw new InvariantError(\n        \"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n        \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n        \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\"\n      );\n    }\n\n    // remove apollo-client supported directives\n    this.link = link;\n    this.cache = cache;\n    this.store = new DataStore(cache);\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    // Attach the client instance to window to let us be found by chrome devtools, but only in\n    // development mode\n    const defaultConnectToDevTools =\n      process.env.NODE_ENV !== 'production' &&\n      typeof window !== 'undefined' &&\n      !(window as any).__APOLLO_CLIENT__;\n\n    if (\n      typeof connectToDevTools === 'undefined'\n        ? defaultConnectToDevTools\n        : connectToDevTools && typeof window !== 'undefined'\n    ) {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self\n      ) {\n        // First check if devtools is not installed\n        if (\n          typeof (window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined'\n        ) {\n          // Only for Chrome\n          if (\n            window.navigator &&\n            window.navigator.userAgent &&\n            window.navigator.userAgent.indexOf('Chrome') > -1\n          ) {\n            // tslint:disable-next-line\n            console.debug(\n              'Download the Apollo DevTools ' +\n                'for a better development experience: ' +\n                'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm',\n            );\n          }\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      link: this.link,\n      store: this.store,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.queryStore.getStore(),\n              mutations: this.queryManager.mutationStore.getStore(),\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      },\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifer, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = {\n        ...this.defaultOptions.watchQuery,\n        ...options,\n      } as WatchQueryOptions<TVariables>;\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = { ...this.defaultOptions.query, ...options } as QueryOptions<\n        TVariables\n      >;\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<T = any, TVariables = OperationVariables>(\n    options: MutationOptions<T, TVariables>,\n  ): Promise<FetchResult<T>> {\n    if (this.defaultOptions.mutate) {\n      options = {\n        ...this.defaultOptions.mutate,\n        ...options,\n      } as MutationOptions<T, TVariables>;\n    }\n\n    return this.queryManager.mutate<T>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    const result = this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    const result = this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  /**\n   * Sugar for writeQuery & writeFragment\n   * This method will construct a query from the data object passed in.\n   * If no id is supplied, writeData will write the data to the root.\n   * If an id is supplied, writeData will write a fragment to the object\n   * specified by the id in the store.\n   *\n   * Since you aren't passing in a query to check the shape of the data,\n   * you must pass in an object that conforms to the shape of valid GraphQL data.\n   */\n  public writeData<TData = any>(\n    options: DataProxy.WriteDataOptions<TData>,\n  ): void {\n    const result = this.cache.writeData<TData>(options);\n    this.queryManager.broadcastQueries();\n    return result;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * This initializes the query manager that tracks queries and the cache\n   */\n  public initQueryManager(): QueryManager<TCacheShape> {\n    invariant.warn(\n      'Calling the initQueryManager method is no longer necessary, ' +\n        'and it will be removed from ApolloClient in version 3.0.',\n    );\n    return this.queryManager;\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore())\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}